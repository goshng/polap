#!/usr/bin/env bash
################################################################################
# This file is part of polap.
#
# polap is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# polap is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# polap. If not, see <https://www.gnu.org/licenses/>.
################################################################################

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
  echo "[ERROR] This script must be executed, not sourced: use 'bash $BASH_SOURCE'" >&2
  return 1 2>/dev/null || exit 1
fi
: "${_POLAP_DEBUG:=0}"
export _POLAP_DEBUG
: "${_POLAP_RELEASE:=0}"
export _POLAP_RELEASE

# OTHER STUFF GENERATED BY Argbash
_polap_script_bin_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || {
  echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2
  exit 2
}
_POLAPLIB_DIR="${_polap_script_bin_dir}/polaplib"

source "${_POLAPLIB_DIR}/polap-lib-timing.sh"
source "${_POLAPLIB_DIR}/polap-lib-data.sh"

_log_echo() {
  if [[ -s "${_brg_outdir}/polap-data-v2.txt" ]]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') [$subcmd1] - $1" >>"${_brg_outdir}/polap-data-v2.txt"
  fi
}

_polap_data_csv="$(basename "$0" .sh).csv"
_polap_data_data="$(basename "$0" .sh).data"

declare -a Sall

################################################################################
# local functions

_local_host="thorne"

# Default values for options
opt_c_arg="off"
opt_t_arg="off"
opt_y_flag=false

# Parse options
while [[ "${1-}" == -* ]]; do
  case "$1" in
  -c)
    shift
    if [[ -z "${1-}" || "${1-}" == -* ]]; then
      echo "Error: -c requires an argument"
      exit 1
    fi
    opt_c_arg="$1"
    ;;
  -t)
    shift
    if [[ -z "${1-}" || "${1-}" == -* ]]; then
      echo "Error: -t requires an argument"
      exit 1
    fi
    opt_t_arg="$1"
    ;;
  -y)
    opt_y_flag=true
    ;;
  --) # End of options
    shift
    break
    ;;
  -*)
    echo "Unknown option: $1"
    exit 1
    ;;
  esac
  shift || break
done

_brg_default_target_dir="$HOME/all/manuscript/polap-v0.5/figures/"
if [[ -d "src" ]]; then
  _brg_default_target_dir="$HOME/all/manuscript/polap-v0.5/figures/"
else
  if [[ -d "../man" ]]; then
    _brg_default_target_dir="../man/v0.5/figures"
  else
    mkdir -p ../man/v0.5/figures
  fi
fi

if [[ "${opt_t_arg}" != "off" ]]; then
  _brg_default_target_dir="${opt_t_arg}"
fi

if [[ "${opt_c_arg}" != "off" ]]; then
  csv_file="${opt_c_arg}"
fi

# Input parameter
subcmd1="${1:-help}"

_polap_cmd="bash ${_polap_script_bin_dir}/polap.sh"

# _polap_version="$(${_polap_cmd} --version | awk '{print $2}')"
if [ -z "${_polap_version+x}" ]; then
  _polap_version="0.5.0.0.1"
fi
_media1_dir="/media/h1/sra"
_media2_dir="/media/h2/sra"
_media_dir="/media/h2/sra"

help_message=$(
  cat <<HEREDOC
Polap version: ${_polap_version}
Usage: $0 [-c file.csv] [-y] <subcommand> [species_folder] [[option] ...]

Polap data analysis of directional mitochondrial genome assembly

List of subcommands:
  install-conda, setup-conda, install-polap, install-fmlrc, install-cflye
  install-getorganelle, install-pmat, install-man
  download-polap-github, patch-polap, bleeding-edge-polap
  delete-polap-github, uninstall, test-polap, download-test-data, help, system
  mkdir-all, rm-empty, rm, example-data, convert-data, sample-csv
  sra, refs, getorganelle, ptgaul, msbwt,
  local-batch, remote-batch, batch, archive, clean, report, get
  seeds, map, reads, dflye, directional, archive, report,
  maintable1, supptable1, suppfigure1, suppfigure3, suppfigure4
  download-man, make-man

How to set a custom CSV:
csv_file=a.csv $0

More help for subcommands:
$(basename $0) help <subcommand>
HEREDOC
)

help_message_seeds=$(
  cat <<HEREDOC

  Test the code.
HEREDOC
)

help_message_map=$(
  cat <<HEREDOC

  Test the code.
HEREDOC
)

help_message_reads=$(
  cat <<HEREDOC

  Test the code.
HEREDOC
)

help_message_dflye=$(
  cat <<HEREDOC

  Test the code.
HEREDOC
)

help_message_directional=$(
  cat <<HEREDOC

  Test the code.
HEREDOC
)

##### INSERT_HELP_HERE #####

declare -A _taxon
declare -A _long
declare -A _short
declare -A _host
declare -A _ssh
declare -A _min_read
declare -A _range
declare -A _inref
declare -A _random_seed
declare -A _dummy
declare -A _status

# Read the config files
read-a-tsv-file-into-associative-arrays() {
  # Define input TSV file
  if [ -z "${csv_file+x}" ]; then
    csv_file="${PWD}/polap-data-v4.csv"
  fi
  if [[ ! -s "${csv_file}" ]]; then
    csv_file="${_POLAPLIB_DIR}/polap-data-v4.csv"
  fi

  # Read the CSV file (skip header)
  # while IFS=$',' read -r species taxon folder long short host ssh ptgaul_genomesize disassemble_type inum disassemble_index random_seed downsample memory compare_p compare_n compare_r disassemble_alpha disassemble_delta disassemble_a disassemble_b table1 table2 mainfigure dummy status; do
  # while IFS=$',' read -r species taxon long short host ssh min_read range random_seed dummy status; do

  while IFS=$',' read -r species long short host inref min_read range random_seed; do
    # Skip header line
    [[ "$species" == "species" ]] && continue
    [[ "$species" == \#* ]] && continue

    # Store in associative arrays
    # _taxon["$species"]="$taxon"
    _long["$species"]="$long"
    _short["$species"]="$short"
    _host["$species"]="$host"
    _inref["$species"]="$inref"
    # _ssh["$species"]="$ssh"
    _min_read["$species"]="$min_read"
    _range["$species"]="$range"
    _random_seed["$species"]="$random_seed"
    # _dummy["$species"]="$dummy"
    # _status["$species"]="$status"
  done <"$csv_file"

  # Extract, clean, sort, and deduplicate keys
  mapfile -t Sall < <(
    for key in "${!_long[@]}"; do
      echo "${key%%-*}"
    done | sort -u
  )
}

S=(
  'Macadamia_tetraphylla'
  'Punica_granatum'
  'Lolium_perenne'
)

_polap_subcmd=(
  'test'
  'seeds'
  'map'
  'reads'
  'dflye'
  'directional'
  'archive'
  'report'
  'table1'
  'figure1'
)

_arg1=${1:-arg1}
# Check if the species folder is provided
if [[ "${_arg1}" == "arg1" ]]; then
  echo "${help_message}"
  exit 1
fi

_arg2=${2:-arg2}
if [[ "${_arg2}" != "arg2" ]]; then
  _arg2="${2%/}"
fi

_arg3=${3:-arg3}
_arg4=${4:-arg4}
_arg5=${5:-arg5}
_arg6=${6:-arg6}
_arg7=${7:-arg7}
_arg8=${8:-arg8}
_arg9=${9:-arg9}
_arg10=${10:-arg10}

read-a-tsv-file-into-associative-arrays

################################################################################
# Part of genus_species
#
test_genus_species() {
  local output_dir="$1"
  local species_name="$(echo $1 | sed 's/_/ /')"
  local long_sra="${_long["$1"]}"
  local short_sra="${_short["$1"]}"
  local random_seed="${_random_seed["$1"]}"

  echo output: $output_dir
  echo host: $(hostname)
  echo species: $species_name
  echo random seed: $random_seed

  if [[ -s "${long_sra}.fastq" ]]; then
    echo long: $long_sra
  else
    echo long: no such fastq file: $long_sra
  fi
  if [[ -s "${short_sra}_1.fastq" ]] &&
    [[ -s "${short_sra}_2.fastq" ]]; then
    echo short: $short_sra
  else
    echo short: no such fastq file: $short_sra
  fi
}

##### INSERT_FUNCTION_HERE #####

# whole-genome assembly
# assemble1
# mt.contig.name-1

# Step 1
# Create directional seed contigs:
# mt.contig.name has one contiguous sequence per line using direction as well
#
# /home/goshng/all/polap/dflye/Lolium_perenne/o/1/mt.contig.name-2
# edge_5-,edge_11+,edge_12+,edge_8+,edge_4+,edge_8-,edge_6-,edge_11-,edge_10+,edge_9-
# -> each line becomes contig_<number>
#
# /home/goshng/all/polap/dflye1/Lolium_perenne/o/2
# └── 01-contig
#     ├── contig1.fa
#     ├── contig1.name.txt
#     ├── contig2.fa
#     └── contig2.name.txt
#
# contig1.name.txt
# ----------------
# contig_1
#
# contig2.name.txt: edges with only one direction; edge_11 has +/- so it is excluded
# ----------------
# edge_9-
# edge_6-
# edge_5-
# edge_4+
# edge_12+
# edge_10+
#
seed_genus_species() {
  local _brg_outdir="${1:-all}"
  local _brg_inum="${2:-0}"

  # mt.contig.name-1 with plus/minus signed edge_<number>[+-]
  ${_polap_cmd} directional-prepare-seeds \
    -o ${_brg_outdir}/o \
    -i 1 -j 2
}

# Step 2
# Map the long-read data on the seed contigs
#
# input:
# o/lk.fq.gz
# o/nk.fq.gz
# seed contigs
#
# output:
# /home/goshng/all/polap/dflye1/Lolium_perenne/o/2
# └── 01-contig
#     ├── contig1.paf
#     ├── contig1.tab
#     ├── contig1_total_length.txt
#     ├── contig2.paf
#     └── contig2.tab
#
map_genus_species() {
  local _brg_outdir="${1:-all}"
  local _brg_inum="${2:-0}"

  # o/lk.fq.gz
  # o/nk.fq.gz
  ${_polap_cmd} directional-map-reads \
    -o ${_brg_outdir}/o \
    -i 1 -j 2
}

# Step 3
# Select reads mapped on the reference and subsample
# -s option for filtering long-read data? not sure.
#
# /home/goshng/all/polap/dflye1/Lolium_perenne/o/2
# └── 01-contig
#     ├── contig1_total_length.txt
#     ├── ptgaul.txt
# ├── 02-reads
# │   └── ptgaul
# │       ├── 0
# │       │   ├── ptgaul.contig1.forward.names.txt
# │       │   └── ptgaul.contig.forward.names.txt
# │       ├── 1
# │       │   ├── ptgaul.contig1.forward.names.txt
# │       │   └── ptgaul.contig.forward.names.txt
# │       └── 2
# │           ├── ptgaul.contig1.forward.names.txt
# │           └── ptgaul.contig.forward.names.txt
# ├── 03-seeds
# │   └── ptgaul
# │       ├── 0.fq.gz
# │       ├── 1.fq.gz
# │       └── 2.fq.gz
# ├── 04-subsample
# │   └── ptgaul
# │       ├── 0.fq.gz
# │       ├── 1.fq.gz
# │       └── 2.fq.gz
#
#
# contig1_total_length.txt <- length of sequences in 01-contig/contig1.fa
# ptgaul.txt <- values to use for read selection
# 02-reads
# 03-seeds
# 04-subsample
# 05-flye
# 06-summary
# 07-plot
#
# STOPPED HERE
select_genus_species() {
  local _brg_outdir="${1:-all}"
  local _brg_inum="${2:-0}"

  # -s 3000,6000,2
  # -s 3000,27000,9
  # -s 30000,42000,5
  ${_polap_cmd} directional-select-reads \
    -o ${_brg_outdir}/o \
    -i 1 -j 2 \
    -s 33000,45000,5
}

# Assembly using dflye
#
# The following produces a circular graph of size 677 kb.
# /home/goshng/all/polap/dflye1/Lolium_perenne/o/2/05-flye/ptgaul/2/30-contigger/graph_final.gfa
# -s 39k produces a circular graph.
#
# Two stages:
# 1. we need to assemble using flye without directional reads but across a range of reads.
# 2. we pick a seed and then using a similar size selection to build.
# Or, we had a candidate with 39k of -w option.
# The directional assembly was also done using 39k.
#
flye_genus_species() {
  local _brg_outdir="${1:-all}"
  local _brg_inum="${2:-0}"

  # -s 3000,6000,2
  # -s 3000,27000,9
  # -s 30000,42000,5
  ${_polap_cmd} directional-flye-reads \
    -o ${_brg_outdir}/o \
    -i 1 -j 2
}

# assemble the directinoal reads using dflye
dflye_genus_species() {
  local _brg_outdir="${1:-all}"
  local _brg_inum="${2:-0}"

  # mt_fastq=/home/goshng/all/polap/dflye1/Lolium_perenne/o/2/03-seeds/ptgaul/2.fq.gz
  # bin/dflye \
  #   --nano-raw ${mt_fastq} \
  #   --debug \
  #   --stop-after contigger \
  #   --asm-coverage 30 \
  #   --directional-reads \
  #   -g 800000 -o $out_dir -t 56 -m 10000

  # run-polap-function-dga -> _run_polap_dflye
  ${_polap_cmd} dflye \
    -o ${_brg_outdir}/o \
    -i 1 -j 2
}

# the first step is a typical polap-assemble1 and assemble2 with seed contig selection.
# now, we use the organelle genome assembly as a seed to apply this directional method.
#
# this is later step.
#
directional_genus_species() {
  local _brg_outdir="${1:-all}"
  local _brg_inum="${2:-0}"
  local target_index="${_brg_outdir}-${_brg_inum}"

  # IFS=':' read -r -a extracted_array_n <<<"${_range["$target_index"]}"

  local extracted_range="${_range["$target_index"]//:/,}"
  local extracted_min_read="${_min_read["$target_index"]}"

  ${_polap_cmd} directional \
    -v -v \
    --select-read-range "${extracted_range}" \
    -o ${_brg_outdir}/o \
    --directional-i 1 \
    --min-read-length "${extracted_min_read}" \
    -i 1 -j 3
}

# Call common case first
common_handled=1
_polap_lib_data-execute-common-subcommand "$subcmd1" "$opt_y_flag"
common_handled=$?

# Main case statement
case "$subcmd1" in
##### INSERT_CASE_HERE #####
example-data)
  if [[ "${_arg2}" == arg2 ]]; then
    echo "Help: ${subcmd1} <data:${_polap_data_data}>"
    echo "  $(basename $0) ${subcmd1} 1.data"
    exit 0
  fi
  _polap_lib_data-${subcmd1} "${_arg2}"
  ;;
seed)
  if [[ "${_arg2}" == arg2 ]]; then
    echo "Help: ${subcmd1} <outdir|all> <inum:N>"
    echo "  $(basename $0) ${subcmd1} all"
    _subcmd1_clean="${subcmd1//-/_}"
    declare -n ref="help_message_${_subcmd1_clean}"
    echo "$ref"
    exit 0
  fi
  [[ "${_arg3}" == arg3 ]] && _arg3=""
  ${subcmd1}_genus_species "${_arg2}" "${_arg3}"
  ;;
map)
  if [[ "${_arg2}" == arg2 ]]; then
    echo "Help: ${subcmd1} <outdir|all> <inum:N>"
    echo "  $(basename $0) ${subcmd1} all"
    _subcmd1_clean="${subcmd1//-/_}"
    declare -n ref="help_message_${_subcmd1_clean}"
    echo "$ref"
    exit 0
  fi
  [[ "${_arg3}" == arg3 ]] && _arg3=""
  ${subcmd1}_genus_species "${_arg2}" "${_arg3}"
  ;;
select)
  if [[ "${_arg2}" == arg2 ]]; then
    echo "Help: ${subcmd1} <outdir|all> <inum:N>"
    echo "  $(basename $0) ${subcmd1} all"
    _subcmd1_clean="${subcmd1//-/_}"
    declare -n ref="help_message_${_subcmd1_clean}"
    echo "$ref"
    exit 0
  fi
  [[ "${_arg3}" == arg3 ]] && _arg3=""
  ${subcmd1}_genus_species "${_arg2}" "${_arg3}"
  ;;
flye)
  if [[ "${_arg2}" == arg2 ]]; then
    echo "Help: ${subcmd1} <outdir|all> <inum:N>"
    echo "  $(basename $0) ${subcmd1} all"
    _subcmd1_clean="${subcmd1//-/_}"
    declare -n ref="help_message_${_subcmd1_clean}"
    echo "$ref"
    exit 0
  fi
  [[ "${_arg3}" == arg3 ]] && _arg3=""
  ${subcmd1}_genus_species "${_arg2}" "${_arg3}"
  ;;
dflye)
  if [[ "${_arg2}" == arg2 ]]; then
    echo "Help: ${subcmd1} <outdir|all> <inum:N>"
    echo "  $(basename $0) ${subcmd1} all"
    _subcmd1_clean="${subcmd1//-/_}"
    declare -n ref="help_message_${_subcmd1_clean}"
    echo "$ref"
    exit 0
  fi
  [[ "${_arg3}" == arg3 ]] && _arg3=""
  ${subcmd1}_genus_species "${_arg2}" "${_arg3}"
  ;;
directional)
  if [[ "${_arg2}" == arg2 ]]; then
    echo "Help: ${subcmd1} <outdir|all> <inum:N>"
    echo "  $(basename $0) ${subcmd1} all"
    _subcmd1_clean="${subcmd1//-/_}"
    declare -n ref="help_message_${_subcmd1_clean}"
    echo "$ref"
    exit 0
  fi
  [[ "${_arg3}" == arg3 ]] && _arg3=""
  ${subcmd1}_genus_species "${_arg2}" "${_arg3}"
  ;;
"menu")
  _run_polap_menu
  ;;
"delete-links")
  find . -type l -delete
  ;;
*)
  # only print usage if common_case didn't handle it
  if [[ $common_handled -ne 0 ]]; then
    echo "Usage: $0 <subcommand> [species_folder]"
    echo "${help_message}"
    echo "subcommand '$subcmd1' is not recognized."
    exit 1
  fi
  ;;
esac
