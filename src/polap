#!/usr/bin/env bash
################################################################################
# This file is part of polap.
#
# polap is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# polap is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# polap. If not, see <https://www.gnu.org/licenses/>.
################################################################################

# Created by argbash-init v2.10.0
# DEFINE_SCRIPT_DIR([])
# INCLUDE_PARSING_CODE([polap-parsing.sh])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# OTHER STUFF GENERATED BY Argbash
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || {
	echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2
	exit 2
}
. "$script_dir/polap-parsing.sh" # '.' means 'source'

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# vvv  PLACE YOUR CODE HERE  vvv

################################################################################
# include bash shell files
################################################################################

source "$script_dir/polap-constants.sh"
source "$script_dir/run-polap-function-utilities.sh"
source "$script_dir/run-polap-function-log.sh"
source "$script_dir/run-polap-function-menus.sh"
source "$script_dir/run-polap-function-reset.sh"
source "$script_dir/polap-function-set-variables.sh"
source "$script_dir/run-polap-function-wga.sh"
source "$script_dir/run-polap-function-blast-genome.sh"
source "$script_dir/run-polap-function-count-gene.sh"
source "$script_dir/run-polap-function-annotate.sh"

# read selection and organelle-genome assembly
source "$script_dir/run-polap-function-oga.sh"
source "$script_dir/run-polap-function-polishing.sh"

# Template
source "$script_dir/run-polap-function-template.sh"

# NCBI: BioProject, NCBI
source "$script_dir/run-polap-function-get-bioproject.sh"
source "$script_dir/run-polap-function-get-mtdna.sh"
source "$script_dir/run-polap-function-compare-mtdna.sh" # FIXME: not tested yet.

# BioProject
source "$script_dir/run-polap-function-assemble-bioproject.sh"
source "$script_dir/run-polap-function-get-bioproject-sra.sh"
source "$script_dir/run-polap-function-copy-sra-bioproject.sh"

# contig selection
source "$script_dir/run-polap-function-select-contigs.sh"
source "$script_dir/run-polap-function-assemble-draft.sh"

# mtDNA or ptDNA selection
source "$script_dir/run-polap-function-select-mtdna.sh"

# mtDNA annotation and plotting
source "$script_dir/run-polap-function-blast-mtdna.sh"
source "$script_dir/run-polap-function-plot-mtdna.sh"

# report, archive, and cleanup
source "$script_dir/run-polap-function-report-assembly.sh"
source "$script_dir/run-polap-function-archive.sh"
source "$script_dir/run-polap-function-cleanup.sh"

# assemble
source "$script_dir/run-polap-function-assemble.sh"

# miscellaneous
source "$script_dir/run-polap-function-miscellaneous.sh"

################################################################################
# utilities
################################################################################

function try() { "$@" || die "cannot $*"; }

function _run_polap_gbs() {
	_run_polap_get-bioproject-sra
}

function _run_polap_scbg() {
	_run_polap_select-contigs-by-graph-depth-length
}

################################################################################
# All of the variables at our disposal
################################################################################

_polap_var_function_verbose=4

# include and execute other BASH and R scripts
WDIR="$(dirname "$0")"
WDIR="${BASH_SOURCE%/*}"
if [[ ! -d "$WDIR" ]]; then
	WDIR="$PWD"
fi
WDIR=${script_dir}

# variables for input data file names for flexible data processing.
LR=${_arg_long_reads}       # long-read data file
SR1=${_arg_short_read1}     # paired short-read data file 1
SR2=${_arg_short_read2}     # paired short-read data file 2
PA=${_arg_unpolished_fasta} # assembled draft sequence extracted from bandage
FA=${_arg_final_assembly}   # polished sequence

# variables for output
ODIR="${_arg_outdir%/}"
INUM=${_arg_inum}
JNUM=${_arg_jnum}
FDIR="$ODIR"/0 # flye 1st output
if [ "${_arg_archive_is}" = "off" ]; then
	_arg_archive="${ODIR}-a"
fi

# tuning variables for optimal performance
LRNK="$ODIR/nk.fq.gz"
MR=${_arg_min_read_length}
MPAIR=${_arg_pair_min}     # 3000 for MT, 1000 for PT
MBRIDGE=${_arg_bridge_min} # used to be 3000,
MSINGLE=${_arg_single_min} # not used deprecated
COV=${_arg_coverage}
# NT=$(cat /proc/cpuinfo | grep -c processor)
NT=${_arg_threads}
if test -z "$DEBUG"; then
	DEBUG=0
fi
CIRCULARIZE=${_arg_circularize} # "--circularize"
SPECIES=${_arg_species}

################################################################
# Variables
SRA=${_arg_sra}
SRALONG=""
SRASHORT=""
RESUME=${_arg_resume}
ALL_ANNOTATE="--selective-annotate"
FLYE_CONTIGGER="--contigger"
USE_EDGES="--no-use-edges"
NO_REDUCTION_READS=${_arg_reduction_reads}
NO_COVERAGE_CHECK=${_arg_coverage_check}

# Constants
EXIT_SUCCESS=0
EXIT_FAIL=1
EXIT_ERROR=2
RETURN_SUCCESS=0
RETURN_FAIL=1

SECONDS=0

################################################################
# MAIN
#
if [ $# -eq 0 ]; then
	print_help
	touch make-menus
	exit $EXIT_SUCCESS
fi

# all message to a log file
# https://stackoverflow.com/questions/49851882/how-to-log-echo-statement-with-timestamp-in-shell-script
if [ "${_arg_log}" = "polap.log" ]; then
	LOG_FILE="${ODIR}/polap.log"
	[[ ! -d "${ODIR}" ]] && mkdir -p "${ODIR}"
else
	LOG_FILE="${_arg_log}"
fi
exec 3>&1 1>> >(logit)
# exec 3>&1 1>> >(logit) 2>&1

CMD="$0 $*"
echo "CMD: $CMD"

# subcommand function call
if declare -f "_run_polap_${_arg_menu[0]}" >/dev/null 2>&1; then
	# invoke that function, passing arguments through
	# _run_polap_"$@" # same as "$1" "$2" "$3" ... for full argument list
	_run_polap_${_arg_menu[0]}
else
	_polap_log0 "Menu: assemble1, annotate, assemble2,"
	_polap_log0 "      reset, total-length-long, find-genome-size, reduce-data, flye1,"
	_polap_log0 "      blast-genome, count-gene, select-reads, flye2,"
	_polap_log0 "      flye-polishing, prepare-polishing, polish,"
	_polap_log0 "      assemble,"
	_polap_log0 "ERROR: no such menu of $1"
fi

ELAPSED="Time at $(hostname): $((SECONDS / 3600))hrs $(((SECONDS / 60) % 60))min $((SECONDS % 60))sec - $CMD"
echo "$ELAPSED"

# _polap_log0 "${_polap_var_apple}"
# _polap_log0 "var: ${_polap_var_apple}"

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
