# ideas

- [ ] pacbio hifi and cflye-more-modified may work for a faster organelle genome assembly - disassemble for pacbio hifi not for CLR or raw.

# TODO

See the files to improve the code later if necessary.

- [ ] polap inspect command for determine the sequence data type
- [v] polap subtract command for remove ptdna-origin data
- [x] collect data for PacBio for plant organelle assembly
- [x] implement polap v1 (assemble) for PacBio
- [ ] implement polap v2 (disassemble) for PacBio

- [ ] analysis of animal mitochondrion assembly using cflye
- [ ] polap annotate on a single sequence to count MT/PT genes
- [ ] run this in bflye command, a version of cflye.

- [ ] polaplib/polap-cmd-bioproject.sh
- [ ] polaplib/polap-build.sh
- [ ] polaplib/polap-cmd-annotate.sh, polaplib/polap-lib-annotate.sh
- [ ] polaplib/polap-cmd-assemble.sh
- [x] subcommand subtract -l l.fq -p polished-4-ptdna-sequences.fa -> new l.fq without ptdna reads
- [ ] debug dflye
- [ ] plant mtDNA version of cflye

# 2025-07-02

- [x] polaplib/polap-cmd-install.sh

# 2025-03-28

run-polap-py-find-plastid-gfa2fasta.py and its relatives -filtering-edges.py
It uses too much memory for finding too many circular paths: about 20 GB.
I wonder if this could be the 20 GB memory for our procedure.
I added hard-code like this in python and bash as well to avoid too much memory.
\_fixed_upper_bound_number_segments = 30

# 2025-03-15

put most of scripts to lib folder.
use polaplib

# 2025-03-14

# qt5

https://github.com/NVlabs/instant-ngp/discussions/300
sudo apt-get install qt5-default
sudo apt-get install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
sudo apt install libxcb-cursor0
export QT_QPA_PLATFORM=offscreen
export QT_QPA_PLATFORM=minimal

# 2024-11-22

- create test datasets
- devise more seed selection criteria
- select mtDNA from the graph
- custom flye for polap
- custom flye with faster whole-genome assembly
- error handling
- geseq annotation and automatic NCBI submission

why geseq annotation?

# 2024-10-31

variable change
CONTIG_LENGTH -> \_CONTIG_LENGTH

Example: test
Example: Anthoceros angustus

Salix_dunni: single contig case -> no combined data

1. cut half and use two contigs
2. use the single contigs

connect two contigs that are far apart
-> lupulina cpDNA case

# 2024-10-30

install:

spliting input lk.fq.gz
rw options

asm-coverage = 0.6 x coverage?
asm-coverage : unknown 30x 50x 70x 90x
subsampling might be a good approach

test reduce-data - nk.fq.gz created without using n.fq
annotation table column names - proper names

## done

return 0 at the end of function to use: tset -e option

# 2024-10-23

# test

-u option

# prev

bioprojects.log.passed

bioproject ID

taxonomy order family species mtDNA accession long SRA short SRA assembled length length coverage Type

# select contig

main 1
select contig - 2 - using all mt contig group
mt & pt
depth cut 5 steps

esearch -db taxonomy -query "taxon_name" | efetch -format docsum | xtract -pattern DocumentSummary -element TaxId



	help_message=$(
		cat <<HEREDOC
POLAP - Plant organelle DNA long-read assembly pipeline.

Version ${_polap_version}

Usage: ${_polap_command_string} [command] [-o|--outdir <arg>]
      [-l|--long-reads <arg>] [-a|--short-read1 <arg>] [-b|--short-read2 <arg>]
      [-i|--inum <arg>] [-j|--jnum <arg>] [-w|--single-min <arg>]
      [-m|--min-read-length <arg>] [-t|--threads <arg>] [--test] [--log <arg>] 
      [--random-seed <arg>] [--version] [-h|--help]

Commands:
  assemble1 - assemble a whole genome using Flye
  assemble2 - assemble an organelle genome using seed contigs
  readassemble - assemble an organelle genome
  disassemble - assemble a plastid genome by subsampling
  polish - polish an organelle genome sequence

To assemble plastid DNA (ptDNA), use:
  ${_polap_command_string} disassemble -l <arg> -a <arg> -b <arg>

Assemble mitochondrial DNA (mtDNA) in a single command (not tested yet):
  ${_polap_command_string} -l <arg> -a <arg> [-b <arg>]
  ${_polap_command_string} assemble -l <arg> -a <arg> [-b <arg>]
 
Perform a polishing of the mtDNA sequence utilizing the FMLRC protocol:
  ${_polap_command_string} prepare-polishing  -a <arg> [-b <arg>]
  ${_polap_command_string} polish -p <arg> -f <arg>

To assemble mitochondrial DNA (mtDNA), follow a two-step process involving
manual seed contig selection:
  ${_polap_command_string} assemble1 -l <arg> -a <arg> [-b <arg>] [-m <arg>]
  ${_polap_command_string} assemble2 -i <arg> -j <arg> [-w <arg>] [-c <arg>]

To assemble mitochondrial DNA (mtDNA), follow a three-step process
that utilizes semi-automatic seed contig selection:
  ${_polap_command_string} assemble1 -l <arg> -a <arg> [-b <arg>] [-m <arg>]
  ${_polap_command_string} seeds -i <arg> -j <arg>
  ${_polap_command_string} assemble2 -i <arg> -j <arg> [-w <arg>] [-c <arg>]

To assemble mitochondrial DNA (mtDNA), follow a series of sequential steps:
  ${_polap_command_string} init -o <arg>
  ${_polap_command_string} summary-reads -a <arg> [-b <arg>]
  ${_polap_command_string} total-length-long -l <arg>
  ${_polap_command_string} find-genome-size -a <arg> [-b <arg>]
  ${_polap_command_string} reduce-data -l <arg> [-m <arg>]
  ${_polap_command_string} flye1 [-t <arg>]
  ${_polap_command_string} edges-stats -i <arg>
  ${_polap_command_string} annotate -i <arg>
  ${_polap_command_string} seeds [-i <arg>] -j <arg>
  ${_polap_command_string} map-reads [-i <arg>] -j <arg>
  ${_polap_command_string} test-reads [-i <arg>] -j <arg> -s <begin>,<end>,<count> [-c <arg>]
  ${_polap_command_string} select-reads [-i <arg>] -j <arg> -w <arg> [-c <arg>]
  ${_polap_command_string} flye2 [-i <arg>] -j <arg>

Others menus:
  ${_polap_command_string} blast-genome -i <arg>
  ${_polap_command_string} count-genes -i <arg>
  ${_polap_command_string} flye-polishing -j <arg>
  ${_polap_command_string} make-menus
  ${_polap_command_string} clean-menus
  ${_polap_command_string} list

BioProject menus:
  ${_polap_command_string} get-bioproject --bioproject <arg>
  ${_polap_command_string} bioproject-prepare -o <arg>
  ${_polap_command_string} get-bioproject-sra --sra <arg>
  ${_polap_command_string} get-mtdna --species <arg>

Other options:
      [-p|--unpolished-fasta <arg>] [-f|--final-assembly <arg>]
      [-c|--coverage <arg>] [--flye-asm-coverage <arg>]
      [--bioproject <arg>] [--species <arg>] [--accession <arg>]
      [--query <arg>] [--subject <arg>]
      [--no-reduction-reads] [--no-coverage-check]
      [--plastid]
      [--archive <arg>]
      [--sra <arg>] [-g|--genomesize <arg>]

menu: assemble, assemble1, annotate, assemble2, flye-polishing, 
      make-menus, list, clean-menus, cleanup, init,
      summary-reads, total-length-long, find-genome-size, reduce-data, flye1
      blast-genome, count-gene, seeds,
      prepare-seeds, map-reads, test-reads, select-reads, flye2,
      flye-polishing, prepare-polishing, polish,
      version

Options:
  -o, --outdir: output folder name (default: ${_arg_outdir})
    The option '-o' or '--outdir' specifies the output folder name, 
    with a default value of 'o'. The output folder typically contains input 
    files that are long-read and short-read data files. Input data files can 
    be specified using the options provided by -l, -a, and -b.

  -l, --long-reads: long-reads data file in fastq format (default: ${_arg_long_reads})
    The option '-l' or '--long-reads' specifies the location of a long-reads 
    data file in fastq format, with a default filename of 'l.fq'.

  -a, --short-read1: short-read fastq file 1 (default: ${_arg_short_read1})
    The option '-a' or '--short-read1' specifies the first short-read fastq 
    file to be used, with a default value of "s1.fq".

  -b, --short-read2: short-read fastq file 2 (default: ${_arg_short_read2})
    The option '-b' or '--short-read2' specifies a short-read fastq file 2, 
    with a default value of 's2.fq'. The second short-read data file, 
    if provided, is considered optional.
    (Note: not tested yet; -a & -b are required.)

  -i, --inum: previous output number of organelle-genome assembly (default: ${_arg_inum})
    The option '-i' or '--inum' specifies the previous output number 
    of an organelle-genome assembly, with a default value of '0'.
    The zero for this option specifies the whole-genome assembly.

  -j, --jnum: current output number of organelle-genome assembly (default: ${_arg_jnum})
    The option '-j' or '--jnum' allows users to specify the current output number 
    for an organelle-genome assembly, with a default value of '1'.

  -m, --min-read-length: minimum length of long reads (default: ${_arg_min_read_length})
    The option '-m' or '--min-read-length' specifies the minimum length of 
    long reads, with a default value of 3000. 

  -t, --threads: number of CPUs (default: maximum number of cores)
    The option '-t' or '--threads' specifies the number of CPU threads to 
    utilize, with a default value equal to the maximum number of available 
    cores in the computer you execute 'polap'.

  -c, --coverage: coverage for the organelle-genome assembly (default: ${_arg_coverage})
    The option '-c' or '--coverage' specifies the coverage percentage for the 
    organelle-genome assembly for controlling the data size.

  -w, --single-min: minimum mapped bases or PAF 11th column (default: ${_arg_single_min})
    This parameter ensures that the alignment level between a long-read and a
    seed contig is properly controlled. For plant mitochondrial DNAs, a DNA
    fragment size of approximately 3 kilobases appears to be more effective
    than the smaller 1-kilobase fragment. In the case of plastid DNAs, a
    fragment size of 1 kilobase (kb) might be more suitable, requiring an
    adjustment to the -m option accordingly.

  -g, --genomesize: expected genome size (default: estimated with a short-read dataset)
    Users can assemble an organelle genome when they have a genome size
    estimate. But, we require a short-read dataset to determine the genome size
    for the whole-genome assembly process. Polishing a long-read assembly
    necessitates the use of a short-read dataset.

  -p, --unpolished-fasta: polishing sequence in fasta format (default: ${_arg_unpolished_fasta})
    The option enables the polishing of sequences in a FASTA format, 
    with the default output file being named 'mt.0.fasta'. 

  -f, --final-assembly: final assembly in fasta format (default: ${_arg_final_assembly})
    The final assembly in FASTA format, with a default file name of 'mt.1.fa'. 

  --no-reduction-reads: reduction of long-read data before assemble1
    In the process of whole-genome assembly, we utilize a reduced amount of
    long-read data. By default, we reduce the size of a long-read dataset prior
    to performing a whole-genome assembly.
    Note: The size of coverage is set by --coverage (default: ${_arg_coverage})

  --no-coverage-check: coverage check before assemble2 step
    By default, in the process of assembling organelle genomes, we reduce
    the size of selected seed reads.
    Note: The size of coverage is set by --coverage (default: ${_arg_coverage})

  --yes: always yes for a question or deletes output completely (off by default)

  --redo: redo a POLAP pipeline (off by default)
    The command specifies that any previously generated intermediate results 
    should be disregarded and new calculations performed from scratch.

  -s, --select-read-range: start,end,number for the range of read selection (default: ${_arg_select_read_range})
    It specifies the values for ptGAUL read-selection minimum number of 
    bases or ratios. For the start and end values of a ratio, real numbers must 
    fall within the range of 0 to 1.
    Note: refer to the menu "test-reads" for help.

  --start-index: used by test-reads
  --end-index: used by test-reads

  --random-seed: 5-digit number (default automatically assigned)
    To ensure reproducibility, you can supply a random number seed 
    to facilitate sampling of reads.
    0 or negative for automatically assigned
    seqkit sample random seed; 11 used in seqkit sample.

  --flye-asm-coverage: Flye --asm-coverage (default: ${_arg_flye_asm_coverage})
    Flye --asm-coverage is a parameter used with the assembly coverage of Flye.

  --no-flye-asm-coverage: no use of Flye --asm-coverage
    The flag '--no-flye-asm-coverage' indicates that we use Flye option 
    neither --asm-coverage nor --genome-size in flye execution.
    This option is the same as --flye-asm-coverage set to 0.
    Note: not tested yet!

  --polap-reads: use intra- and inter-contig read selection (default: ${_arg_polap_reads})
    The default read selection is ptGAUL's approach.
    This option allows long reads that are mapped within a seed contig and
    between two contigs.

  --directional: (default: ${_arg_directional})
    Use only forward strands of seed contigs and reads mapped on the seeds.
    Seed contigs need to be specific to direction; edge_1+ not just edge_1.
    Each line of mt.contig.name file could have multiple edge name with plus or
    minus sign separated by a comma.
    Example: edge_1+, edge_2-, edge_7+, edge_2+

  --blast: (default: ${_arg_blast})

  --bridge-same-strand: (default: ${_arg_bridge_same_strand})
    When linking two inverted repeats, enabling this feature ensures that 
    the strands are equal for the two mapped IR contigs.
    Note: currently only plus strand is used.

  --log: log file (default: <output>/polap.log)
    The log file option allows users to specify a custom log file location, 
    with a default setting of '<output>/polap.log'.

  --clock: display the start and ending time (default: ${_arg_clock})
    The clock option allows users to display both the start and end times.

  --markdown: display the table in markdown format (default: ${_arg_markdown})

disassemble options:
    Use help menu of the subcommand to see more example commands.

  --downsample : maximum genome coverage to downsample (default: ${_arg_downsample})
    The coverage for downsampling before assembling the plastid genome.
    The genome size for the coverage is computed using short-read data.
    Use option -i for a new downsampled set of data.
    The default is a recommended downsample depth relative to a genome size estimate.

  --disassemble-p: the percentile of the largest long-read (default: ${_arg_disassemble_p})
    The maximum percentage for the long-read data subsampling. Use this or
    option --disassemble-b for the maximum subsample size for a range of the
    subsampling.
    The default is a recommended value given the downsample value.

  --disassemble-n: the number of steps (default: ${_arg_disassemble_n})
    The number of iterations in the first stage of the subsampling-based assembly.
    The default is a recommended number of iterations.

  --disassemble-r: the number of replicates (default: ${_arg_disassemble_r})
    The number of iterations in the second and third stages.
    The default is a recommended number of iterations.

  --disassemble-q: the percentile of the largest short-read (default: ${_arg_disassemble_p})
    The maximum percentage for the short-read data subsampling.
    If not specified, we use the option value of --disassemble-p as the value
    for --disassemble-q.

  --disassemble-i: the index used for a separate plastid assemblies (default: ${_arg_disassemble_i})
    Use the same downsampled data to assemble ptDNA with a different set of
    options. Use option -i to have different downsampled data.

  --disassemble-a: the smallest base pairs for a subsampling range (default: ${_arg_disassemble_a})
    The smallest subsample size: default is 10 Mb. This number must be greater
    than the largest one using option --disassemble-b.
    The option --disassemble-p should be chosen so that the largest subsample
    size should be greater than the value of option --disassemble-a.

  --disassemble-b: the largest base pairs for a subsampling range (default: ${_arg_disassemble_b})
    The largest subsample size in base pairs. 

  --disassemble-m: the upper bound for a Flye assembly (default: ${_arg_disassemble_m})
    The upper bound for an initital preassembly size.
    The default for plastid genome assembly is 500 kb.
    We keep the Flye's preassembly size under this value by adjusting
    the read-coverage threshold.

  --disassemble-memory: the maximum memory in Gb (default: ${_arg_disassemble_memory})
    The memory maximum requirement for the plastid genome assembly.
    Note that this value does not guarantee the overrun of memory. 
    You can choose to allocate a smaller amount of memory than your computer's 
    total capacity if you are constrained by limited resources.
    You should adjust this based on the specifics of your plastid genome 
    assembly outcome.

  --disassemble-alpha: the starting Flye's disjointig coverage (default: ${_arg_disassemble_alpha})
    This option should remain unchanged initially.
    Use it if you really have a long-run analysis that you want to be shortened.

  --disassemble-delta: the move size of alpha (0.1 - 1.0) (default: ${_arg_disassemble_delta})
    Leave this option as it is, without any changes.

  --disassemble-s: subsample size for stage 2, skipping stage 1 (default: ${_arg_disassemble_s})
    If you are sure of the subsample size and the read-coverage threshold,
    set this option to bypass Stage 1.

  --disassemble-beta: subsample rate for stage 2, skipping stage 1 (default: ${_arg_disassemble_beta})
    Use either this option or --disassemble-s to set the subsample size.
    Setting both of them does not make sense.
    If you are sure of the subsample size and the read-coverage threshold,
    set this option to bypass Stage 1.

  --disassemble-align-reference: (default: ${_arg_disassemble_align_reference})
    Use this and --disassemble-c so that you can compare a known ptDNA and
    the subsampling-based assembly.

  --disassemble-c: a single reference sequence in FASTA (no default)
    If you want to compare a ptDNA sequence with a subsampling-based assembly,
    set this option to a FASTA file with a single sequence. It will be compared
    with the assembled ptDNA.

  --jellyfish-s: JellyFish's -s option (default: ${_arg_jellyfish_s})
    For disassemble subcommand, it is set to 2G if not set here.
    The -s 2G of JellyFish option claims memory of about 6 GB.
    If it is slow in assembly size estimate, increase this value to
    e.g., 5g or 10g. It would requires more memory.

  Experimental (not implemented yet!):
  --nano-raw (default), --nano-corr, --nano-hq:
  --pacbio-raw, --pacbio-corr, --pacbio-hifi:
    The Flye program requires a specific input data type.
    If one switch is activated, the other switches are automatically deactivated.
    Note: not tested yet!
  --timing: turn on timing and memory usage

  --species: Species scientific name (no default)
  --sra: SRA data (no default)

  -v, --verbose: use multiple times to increase the verbose level
  --version: Prints version
  -h: Prints polap global help
  --help: Prints menu help

Example:
git clone https://github.com/goshng/polap.git
cd polap/test
polap --test

Place your long-read and short-read files at a folder:
long-read file: l.fq
short-read file: s1.fq, s2.fq
Execute: polap init
HEREDOC
	)
