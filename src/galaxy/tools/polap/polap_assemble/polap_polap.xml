<tool id="polap_polap" name="Polap assemble" version="0.1.0+galaxy0" python_template_version="3.5" profile="21.05">
    <description>plant mitochondrial DNAs</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><![CDATA[
        polap seeds
    ]]></command>
    <inputs>
        <param type="data" name="input1" format="fq" />
        <param type="data" name="input2" format="fq" />
        <param type="data" name="input3" format="fq" />
    </inputs>
    <outputs>
        <data name="output1" format="gfa" from_work_dir="1-wga.gfa" />
        <data name="output2" format="gfa" from_work_dir="2-oga.gfa" />
    </outputs>
    <tests>
        <test>
            <param name="input1" value="s1.fq"/>
            <param name="input2" value="s2.fq"/>
            <param name="input3" value="l.fq"/>
            <output name="output1" file="1-wga.gfa"/>
            <output name="output2" file="2-oga.gfa"/>
        </test>
    </tests>
    <help><![CDATA[
        # Run the POLAP organelle-genome assembly with sequencing data.
#
# Steps:
#   1. assemble1
#   2. seeds -> multiple mt.contig.name files
#   3. assemble2 -> assemble as many organelle genomes as mt.contig.name files
# 
# Arguments:
#   -o o: output folder
#   -l l.fq: a long-read fastq data file
#   -a s1.fq: a short-read fastq data file
#   -b s2.fq: another short-read fastq data file
# Inputs:
#   l.fq: a long-read fastq 
#   s1.fq: a short-read fastq data file
#   s2.fq: another short-read fastq data file
# Outputs:
#   o/1/assembly_graph.gfa
Example: polap -l l.fq -a s1.fq -b s2.fq
Example: polap --test
Example: polap assemble -o o2

    ]]></help>
    <expand macro="citations" />
</tool>