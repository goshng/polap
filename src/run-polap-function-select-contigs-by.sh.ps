%!PS-Adobe-3.0
%%Title: run-polap-function-select-contigs-by.sh
%%For: Sang Chul Choi
%%Creator: a2ps version 4.14
%%CreationDate: Sun Oct  6 15:28:44 2024
%%BoundingBox: 24 24 571 818
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 7
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 24 def
/urx 818 def
/ury 571 def
/lly 24 def
/#copies 1 def
/th 20.000000 def
/fnfs 15 def
/bfs 9.561657 def
/cw 5.736994 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 138.400000 mul
def
/ph
   494.337664 th add
def
/pmw 0 def
/pmh 0 def
/v 0 def
/x [
  0
] def
/y [
  pmh ph add 0 mul ph add
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 5 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.015896 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(1) # (################################################################################) p n
(2) # (# This file is part of polap.) N
(3) # (#) N
(4) # (# polap is free software: you can redistribute it and/or modify it under the) N
(5) # (# terms of the GNU General Public License as published by the Free Software) N
(6) # (# Foundation, either version 3 of the License, or \(at your option\) any later) N
(7) # (# version.) N
(8) # (#) N
(9) # (# polap is distributed ) S
(in) K
( the hope that it will be useful, but WITHOUT ANY) p n
(10) # (# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR) N
(11) # (# A PARTICULAR PURPOSE. See the GNU General Public License ) S
(for) K
( more details.) p n
(12) # (#) N
(13) # (# You should have received a copy of the GNU General Public License along with) N
(14) # (# polap. If not, see <https:) S
(//www.gnu.org/licenses/>.) c n
(15) # () S
(################################################################################) p n
(16) # () N
(17) # (################################################################################) N
(18) # (# Ensure that the current script is sourced only once) N
(19) # (source ") S
($script_dir/run-polap-function-include.sh) str
(") p n
(20) # (_POLAP_INCLUDE_=$\(_polap_include ") S
(${BASH_SOURCE[0]}) str
("\)) p n
(21) # ([[ -n ") S
(${!_POLAP_INCLUDE_}) str
(" ]] && ) p
(return) K
( 0) p n
(22) # (declare ") S
($_POLAP_INCLUDE_=1) str
(") p n
(23) # (#) N
(24) # (################################################################################) N
(25) # () N
(26) # (################################################################################) N
(27) # (# Selects contigs ) S
(for) K
( an organelle-genome assembly.) p n
(28) # (#) N
(29) # (# 1. We could select mitochondrial- or plastid-derived contigs using a contig annotation table.) N
(30) # (# 2. We determine the ) S
(range) K
( of sequencing depths ) p
(for) K
( those candidate contigs: mean +/- sd \\* 3.) p n
(31) # (# 3. For a given gfa of a genome assembly graph, subset the graph ) S
(for) K
( selecting graph elements ) p
(in) K
( the ) p
(range) K
(.) p n
(32) # (# 4. Determine connected components ) S
(in) K
( the subset.) p n
(33) # (# 5. Choose connected components with candidate edges.) N
(34) # (#) N
(35) # (# We need to read GFA files to manipulate.) N
(36) # (# We need to determine connected components.) N
(37) # (################################################################################) N
(38) # (function _run_polap_select-contigs-by\(\) {) N
(39) # () S 8 T (# Enable debugging ) S
(if) K
( DEBUG is set) p n
(40) # () S 8 T ([ ") S
($DEBUG) str
(" -eq 1 ] && set -x) p n
(41) # () S 8 T (_polap_log_function ") S
(Function start: $\(echo $FUNCNAME | sed s/_run_polap_//\)) str
(") p n
(42) # () N
(43) # () S 8 T (# Set verbosity level: stderr ) S
(if) K
( verbose >= 2, otherwise discard output) p n
(44) # () S 8 T (local _polap_output_dest=") S
(/dev/null) str
(") p n
(45) # () S 8 T ([ ") S
(${_arg_verbose}) str
(" -ge ") p
(${_polap_var_function_verbose}) str
(" ] && _polap_output_dest=") p
(/dev/stderr) str
(") p n
(46) # () N
(47) # () S 8 T (# Grouped file path declarations) N
(48) # () S 8 T (source ") S
($script_dir/polap-variables-mtcontig.sh) str
(" # ') p
(.) str
(' means ') p
(source) str
(') p n
(49) # () N
(50) # () S 8 T (# Print help message ) S
(if) K
( requested) p n
(51) # () S 8 T (help_message=$\() N
(run-polap-function-select-contigs-by.sh) (Page 1/7) (10\354M-^[M-^T 06, 24 15:27) title
border
grestore
(Printed by Sang Chul Choi) rhead
(run-polap-function-select-contigs-by.sh) (1/7) (\354M-^]\274\354M-^ZM-^T\354M-^]\274 10\354M-^[M-^T 06, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.015896 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(52) # () p 8 T () S 16 T (cat <<HEREDOC) N
(53) # (# Selects contigs using three features using total lengths of contigs.) N
(54) # (#) N
(55) # (# Use the total length ) S
(in) K
( the cumulative distribution of contig lengths) p n
(56) # (# to select the lower and upper bounds of contig lengths.) N
(57) # (#) N
(58) # (# To identify seed contigs of mitochondrial origin, ) N
(59) # (# a whole-genome assembly is evaluated ) S
(for) K
( three criteria: ) p n
(60) # (# 1\) the presence of mitochondrial or plastid genes, ) N
(61) # (# 2\) the number of read coverage, and) N
(62) # (# 3\) the connectivity of contigs ) S
(in) K
( the genome assembly graph. ) p n
(63) # (#) N
(64) # (# 1. We could select mitochondrial- or plastid-derived contigs using a contig annotation table.) N
(65) # (# 2. We determine the ) S
(range) K
( of sequencing depths ) p
(for) K
( those candidate contigs: mean +/- sd \\* 3.) p n
(66) # (#   2.1 Construct the cumulative distribution of contig lengths.) N
(67) # (#   2.2 Given L1=3Mb, determine the lower bound of the contig length.) N
(68) # (#   2.3 Given L2=300 kb, determine the upper bound of the contig length.) N
(69) # (# 3. For a given gfa of a genome assembly graph, subset the graph ) S
(for) K
( selecting graph elements ) p
(in) K
( the ) p
(range) K
(.) p n
(70) # (# 4. Determine connected components ) S
(in) K
( the subset.) p n
(71) # (# 5. Choose connected components with candidate edges.) N
(72) # (#) N
(73) # (# Arguments:) N
(74) # (#   -i $INUM: source Flye \(usually whole-genome\) assembly number) N
(75) # (#   -j $JNUM: destination Flye organelle assembly number) N
(76) # (#   --select-contig: 1 ~ 5) N
(77) # (#) N
(78) # (# Inputs:) N
(79) # (#   ${_polap_var_assembly_graph_final_gfa}) N
(80) # (#   ${_polap_var_annotation_table}) N
(81) # (#) N
(82) # (# Outputs:) N
(83) # (#   $MTCONTIGNAME) N
(84) # (#   ") S
(${_polap_var_mtcontig_annotated}) str
(") p n
(85) # (#) N
(86) # (# See:) N
(87) # (#   run-polap-select-contigs-by-table-1.R ) S
(for) K
( the description of --select-contig option) p n
(88) # (Example: $\(basename $0\) ${_arg_menu[0]} [-i|--inum <arg>] [-j|--jnum <arg>] [--select-contig <number>]) N
(89) # (Example: $\(basename $0\) ${_arg_menu[0]} -o PRJNA914763 -i 0 -j 5 --select-contig 5) N
(90) # (HEREDOC) N
(91) # () S 8 T (\)) N
(92) # () N
(93) # () S 8 T (# Display help message) N
(94) # () S 8 T ([[ ${_arg_menu[1]} == ") S
(help) str
(" ]] && _polap_echo0 ") p
(${help_message}) str
(" && exit $EXIT_SUCCESS) p n
(95) # () N
(96) # () S 8 T (# Display the content of output files) N
(97) # () S 8 T () S
(if) K
( [[ ") p
(${_arg_menu[1]}) str
(" == ") p
(view) str
(" ]]; then) p n
(98) # () N
(99) # () S 8 T () S 16 T () S
(case) K
( ") p
(${_arg_select_contig}) str
(" ) p
(in) K n
(100) # () S
() p 8 T () S 16 T (1 | 3\)) N
(101) # () S 8 T () S 16 T () S 24 T (check_file_existence ") S
(${_polap_var_mtcontig_annotated}) str
(") p n
(102) # () S 8 T () S 16 T () S 24 T (_polap_log0_cat ") S
(${_polap_var_mtcontig_annotated}) str
(") p n
(run-polap-function-select-contigs-by.sh) (Page 2/7) (10\354M-^[M-^T 06, 24 15:27) title
border
grestore
(Printed by Sang Chul Choi) rhead
(run-polap-function-select-contigs-by.sh) (2/7) (\354M-^]\274\354M-^ZM-^T\354M-^]\274 10\354M-^[M-^T 06, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.015896 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(103) # () p 8 T () S 16 T () S 24 T (check_file_existence ") S
(${_polap_var_mtcontig_stats}) str
(") p n
(104) # () S 8 T () S 16 T () S 24 T (_polap_log0_cat ") S
(${_polap_var_mtcontig_stats}) str
(") p n
(105) # () S 8 T () S 16 T () S 24 T (;;) N
(106) # () S 8 T () S 16 T (2 | 4 | 5\)) N
(107) # () S 8 T () S 16 T () S 24 T (check_file_existence ") S
(${_polap_var_mtcontig_mixfit}) str
(") p n
(108) # () S 8 T () S 16 T () S 24 T (_polap_log0_cat ") S
(${_polap_var_mtcontig_mixfit}) str
(") p n
(109) # () S 8 T () S 16 T () S 24 T (check_file_existence ") S
(${_polap_var_mtcontig_annotated}) str
(") p n
(110) # () S 8 T () S 16 T () S 24 T (_polap_log0_cat ") S
(${_polap_var_mtcontig_annotated}) str
(") p n
(111) # () S 8 T () S 16 T () S 24 T (check_file_existence ") S
(${_polap_var_mtcontig_stats}) str
(") p n
(112) # () S 8 T () S 16 T () S 24 T (_polap_log0_cat ") S
(${_polap_var_mtcontig_stats}) str
(") p n
(113) # () S 8 T () S 16 T () S 24 T (check_file_existence ") S
(${_polap_var_mtcontig_mixfit}) str
(") p n
(114) # () S 8 T () S 16 T () S 24 T (_polap_log0_cat ") S
(${_polap_var_mtcontig_mixfit}) str
(") p n
(115) # () S 8 T () S 16 T () S 24 T (;;) N
(116) # () S 8 T () S 16 T (*\)) N
(117) # () S 8 T () S 16 T () S 24 T (echo ") S
(Invalid input!) str
(") p n
(118) # () S 8 T () S 16 T () S 24 T (;;) N
(119) # () S 8 T () S 16 T (esac) N
(120) # () N
(121) # () S 8 T () S 16 T (_polap_log2 ") S
(Function end: $\(echo $FUNCNAME | sed s/_run_polap_//\)) str
(") p n
(122) # () S 8 T () S 16 T (# Disable debugging ) S
(if) K
( previously enabled) p n
(123) # () S 8 T () S 16 T ([ ") S
($DEBUG) str
(" -eq 1 ] && set +x) p n
(124) # () S 8 T () S 16 T (exit $EXIT_SUCCESS) N
(125) # () S 8 T (fi) N
(126) # () N
(127) # () S 8 T (_polap_log0 ") S
(selecting seed contigs using $\(echo $FUNCNAME | sed s/_run_polap_//\) ${INUM} -> ${JNUM} with type ${_arg_select_contig}) str
(") p n
(128) # () N
(129) # () S 8 T (# Check ) S
(for) K
( required files) p n
(130) # () S 8 T (check_file_existence ") S
(${_polap_var_assembly_graph_final_gfa}) str
(") p n
(131) # () S 8 T (check_file_existence ") S
(${_polap_var_annotation_table}) str
(") p n
(132) # () S 8 T (_polap_log0 ") S
(  input1: ${_polap_var_assembly_graph_final_gfa}) str
(") p n
(133) # () S 8 T (_polap_log0 ") S
(  input2: ${_polap_var_annotation_table}) str
(") p n
(134) # () N
(135) # () S 8 T (# Clean and create working directory) N
(136) # () S 8 T (_polap_log1 ") S
(  delete and create dir:${_polap_var_mtcontigs}) str
(") p n
(137) # () S 8 T (_polap_log3_cmd rm -rf ") S
(${_polap_var_mtcontigs}) str
(") p n
(138) # () S 8 T (_polap_log3_cmd mkdir -p ") S
(${_polap_var_mtcontigs}) str
(") p n
(139) # () N
(140) # () S 8 T (# Step 1: Determine the depth ) S
(range) K
( using the cumulative length distribution.) p n
(141) # () S 8 T (# Step 1: Select contigs based on genes) N
(142) # () S 8 T (_polap_log1 ") S
(  select-contig type: ${_arg_select_contig}) str
(") p n
(143) # () S 8 T (_polap_log1 ") S
(run-polap-select-contigs-by-table-1.R) str
(") p n
(144) # () S 8 T (_polap_log2_file ") S
(  input1: ${_polap_var_annotation_table}) str
(") p n
(145) # () S 8 T (_polap_log2_file ") S
(  output-base1: ${_polap_var_mtcontig_base}) str
(") p n
(146) # () S 8 T () S
(case) K
( ") p
(${_arg_select_contig}) str
(" ) p
(in) K n
(147) # () S
() p 8 T (1 | 3\)) N
(148) # () S 8 T () S 16 T (") S
($WDIR) str
("/run-polap-select-contigs-by-table-1.R \\) p n
(149) # () S 8 T () S 16 T () S 24 T (-t ") S
(${_polap_var_annotation_table}) str
(" \\) p n
(150) # () S 8 T () S 16 T () S 24 T (-o ") S
(${_polap_var_mtcontig_base}) str
(" \\) p n
(151) # () S 8 T () S 16 T () S 24 T (-c -d 10 \\) N
(152) # () S 8 T () S 16 T () S 24 T (2>") S
($_polap_output_dest) str
(") p n
(153) # () S 8 T () S 16 T (;;) N
(run-polap-function-select-contigs-by.sh) (Page 3/7) (10\354M-^[M-^T 06, 24 15:27) title
border
grestore
(Printed by Sang Chul Choi) rhead
(run-polap-function-select-contigs-by.sh) (3/7) (\354M-^]\274\354M-^ZM-^T\354M-^]\274 10\354M-^[M-^T 06, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.015896 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(154) # () p 8 T (2 | 4\)) N
(155) # () S 8 T () S 16 T (") S
($WDIR) str
("/run-polap-select-contigs-by-table-1.R \\) p n
(156) # () S 8 T () S 16 T () S 24 T (-t ") S
(${_polap_var_annotation_table}) str
(" \\) p n
(157) # () S 8 T () S 16 T () S 24 T (-o ") S
(${_polap_var_mtcontig_base}) str
(" \\) p n
(158) # () S 8 T () S 16 T () S 24 T (-c -d 10 \\) N
(159) # () S 8 T () S 16 T () S 24 T (-r \\) N
(160) # () S 8 T () S 16 T () S 24 T (2>") S
($_polap_output_dest) str
(") p n
(161) # () S 8 T () S 16 T (;;) N
(162) # () S 8 T (5\)) N
(163) # () S 8 T () S 16 T (") S
($WDIR) str
("/run-polap-select-contigs-by-table-1.R \\) p n
(164) # () S 8 T () S 16 T () S 24 T (-t ") S
(${_polap_var_annotation_table}) str
(" \\) p n
(165) # () S 8 T () S 16 T () S 24 T (-o ") S
(${_polap_var_mtcontig_base}) str
(" \\) p n
(166) # () S 8 T () S 16 T () S 24 T (-c -d 10 \\) N
(167) # () S 8 T () S 16 T () S 24 T (-r \\) N
(168) # () S 8 T () S 16 T () S 24 T (-s \\) N
(169) # () S 8 T () S 16 T () S 24 T (2>") S
($_polap_output_dest) str
(") p n
(170) # () S 8 T () S 16 T (;;) N
(171) # () S 8 T (*\)) N
(172) # () S 8 T () S 16 T (echo ") S
(Invalid input!) str
(") p n
(173) # () S 8 T () S 16 T (;;) N
(174) # () S 8 T (esac) N
(175) # () N
(176) # () S 8 T (_polap_log2_file ") S
(  output1: ${_polap_var_mtcontig_stats}) str
(") p n
(177) # () S 8 T (_polap_log2_file ") S
(  output2: ${_polap_var_mtcontig_annotated}) str
(") p n
(178) # () N
(179) # () S 8 T () S
(case) K
( ") p
(${_arg_select_contig}) str
(" ) p
(in) K n
(180) # () S
() p 8 T (1 | 2\)) N
(181) # () S 8 T () S 16 T (# Save the first column \(contig names\) to the output file) N
(182) # () S 8 T () S 16 T () S
(if) K
( [ -s ") p
(${_polap_var_mtcontig_annotated}) str
(" ]; then) p n
(183) # () S 8 T () S 16 T () S 24 T (cut -f1 ") S
(${_polap_var_mtcontig_annotated}) str
(" |) p n
(184) # () S 8 T () S 16 T () S 24 T () S 32 T (sort | uniq >") S
(${MTCONTIGNAME}) str
(") p n
(185) # () S 8 T () S 16 T () S 24 T (_polap_log1_file ") S
(output: ${MTCONTIGNAME}) str
(") p n
(186) # () S 8 T () S 16 T () S
(else) K n
(187) # () S
() p 8 T () S 16 T () S 24 T (>") S
(${MTCONTIGNAME}) str
(") p n
(188) # () S 8 T () S 16 T () S 24 T (_polap_log1_file ") S
(output: empty ${MTCONTIGNAME}) str
(") p n
(189) # () S 8 T () S 16 T (fi) N
(190) # () S 8 T () S 16 T (_polap_log2 ") S
(Function end: $\(echo $FUNCNAME | sed s/_run_polap_//\)) str
(") p n
(191) # () S 8 T () S 16 T ([ ") S
($DEBUG) str
(" -eq 1 ] && set +x) p n
(192) # () S 8 T () S 16 T () S
(return) K n
(193) # () S
() p 8 T () S 16 T (;;) N
(194) # () S 8 T (3 | 4 | 5\)) N
(195) # () S 8 T () S 16 T () S
(if) K
( [ ! -s ") p
(${_polap_var_mtcontig_annotated}) str
(" ]; then) p n
(196) # () S 8 T () S 16 T () S 24 T (>") S
(${MTCONTIGNAME}) str
(") p n
(197) # () S 8 T () S 16 T () S 24 T (_polap_log1_file ") S
(output: empty ${MTCONTIGNAME}) str
(") p n
(198) # () S 8 T () S 16 T () S 24 T (_polap_log2 ") S
(Function end: $\(echo $FUNCNAME | sed s/_run_polap_//\)) str
(") p n
(199) # () S 8 T () S 16 T () S 24 T ([ ") S
($DEBUG) str
(" -eq 1 ] && set +x) p n
(200) # () S 8 T () S 16 T () S 24 T () S
(return) K n
(201) # () S
() p 8 T () S 16 T (fi) N
(202) # () S 8 T () S 16 T (;;) N
(203) # () S 8 T (*\)) N
(204) # () S 8 T () S 16 T (echo ") S
(Invalid input!) str
(") p n
(run-polap-function-select-contigs-by.sh) (Page 4/7) (10\354M-^[M-^T 06, 24 15:27) title
border
grestore
(Printed by Sang Chul Choi) rhead
(run-polap-function-select-contigs-by.sh) (4/7) (\354M-^]\274\354M-^ZM-^T\354M-^]\274 10\354M-^[M-^T 06, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.015896 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(205) # () p 8 T () S 16 T (;;) N
(206) # () S 8 T (esac) N
(207) # () N
(208) # () S 8 T (# Handle ) S
(case) K
( with single starting contig) p n
(209) # () S 8 T (local mtcontig_count=$\(wc -l <") S
(${_polap_var_mtcontig_annotated}) str
("\)) p n
(210) # () S 8 T () S
(if) K
( [ ") p
(${mtcontig_count}) str
(" -eq 1 ]; then) p n
(211) # () S 8 T () S 16 T (cut -f1 ") S
(${_polap_var_mtcontig_annotated}) str
(" >") p
(${MTCONTIGNAME}) str
(") p n
(212) # () S 8 T () S 16 T (_polap_log2_log ") S
(single starting contig) str
(") p n
(213) # () S 8 T () S 16 T (_polap_log1_file ") S
(output: ${MTCONTIGNAME}) str
(") p n
(214) # () S 8 T () S 16 T (_polap_log2 ") S
(Function end: $\(echo $FUNCNAME | sed s/_run_polap_//\)) str
(") p n
(215) # () S 8 T () S 16 T ([ ") S
($DEBUG) str
(" -eq 1 ] && set +x) p n
(216) # () S 8 T () S 16 T () S
(return) K n
(217) # () S
() p 8 T (fi) N
(218) # () N
(219) # () S 8 T (# Extract sequences and filter GFA data) N
(220) # () S 8 T (_polap_log2 ") S
(creating GFA without sequence data) str
(") p n
(221) # () S 8 T (gfatools view -S ") S
(${_polap_var_assembly_graph_final_gfa}) str
(" \\) p n
(222) # () S 8 T () S 16 T (>") S
(${_polap_var_gfa_all}) str
(" \\) p n
(223) # () S 8 T () S 16 T (2>") S
($_polap_output_dest) str
(") p n
(224) # () S 8 T (_polap_log2_file ") S
(${_polap_var_gfa_all}) str
(") p n
(225) # () N
(226) # () S 8 T (_polap_log2 ") S
(extracting sequence part of GFA) str
(") p n
(227) # () S 8 T (gfatools view -S ") S
(${_polap_var_assembly_graph_final_gfa}) str
(" \\) p n
(228) # () S 8 T () S 16 T (2>") S
($_polap_output_dest) str
(" |) p n
(229) # () S 8 T () S 16 T (grep ") S
(^S) str
(" >") p
(${_polap_var_gfa_seq_part}) str
(") p n
(230) # () S 8 T (_polap_log2_file ") S
(${_polap_var_gfa_seq_part}) str
(") p n
(231) # () N
(232) # () S 8 T (# Filter edges ) S
(in) K
( GFA using depths.) p n
(233) # () S 8 T (_polap_log2 ") S
(filtering GFA sequence part using depth range) str
(") p n
(234) # () S 8 T (") S
($WDIR) str
("/run-polap-select-contigs-by-depth-length-2-gfa-filter.R \\) p n
(235) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_seq_part}) str
(" \\) p n
(236) # () S 8 T () S 16 T (") S
(${_polap_var_mtcontig_stats}) str
(" \\) p n
(237) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_seq_filtered}) str
(" \\) p n
(238) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_seq_filtered_range}) str
(" \\) p n
(239) # () S 8 T () S 16 T (2>") S
($_polap_output_dest) str
(") p n
(240) # () N
(241) # () S 8 T (_polap_log2_file ") S
(${_polap_var_gfa_seq_filtered}) str
(") p n
(242) # () N
(243) # () S 8 T (# Recreate GFA based on filtered edge sequences.) N
(244) # () S 8 T (_polap_log2 ") S
(subsetting GFA using the depth-filtered GFA sequence part) str
(") p n
(245) # () S 8 T (cut -f1 ") S
(${_polap_var_gfa_seq_filtered}) str
(" >") p
(${_polap_var_gfa_seq_filtered_edge}) str
(") p n
(246) # () S 8 T (gfatools view -S \\) N
(247) # () S 8 T () S 16 T (-l @") S
(${_polap_var_gfa_seq_filtered_edge}) str
(" \\) p n
(248) # () S 8 T () S 16 T (") S
(${_polap_var_assembly_graph_final_gfa}) str
(" 2>/dev/null \\) p n
(249) # () S 8 T () S 16 T (>") S
(${_polap_var_gfa_filtered}) str
(") p n
(250) # () N
(251) # () S 8 T (_polap_log2_file ") S
(${_polap_var_gfa_filtered}) str
(") p n
(252) # () N
(253) # () S 8 T (# Prepare links ) S
(for) K
( finding connected components.) p n
(254) # () S 8 T (grep ") S
(^L) str
(" ") p
(${_polap_var_gfa_filtered}) str
(" | cut -f2,4 >") p
(${_polap_var_gfa_links}) str
(") p n
(255) # () S 8 T (_polap_log2_file ") S
(${_polap_var_gfa_links}) str
(") p n
(run-polap-function-select-contigs-by.sh) (Page 5/7) (10\354M-^[M-^T 06, 24 15:27) title
border
grestore
(Printed by Sang Chul Choi) rhead
(run-polap-function-select-contigs-by.sh) (5/7) (\354M-^]\274\354M-^ZM-^T\354M-^]\274 10\354M-^[M-^T 06, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (6) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.015896 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(256) # () p n
(257) # () S 8 T (# Run R script to analyze GFA links) N
(258) # () S 8 T (_polap_log2 ") S
(preparing for finding connected components) str
(") p n
(259) # () S 8 T (") S
($WDIR) str
("/run-polap-select-contigs-3-gfa-links.R \\) p n
(260) # () S 8 T () S 16 T (") S
(${_polap_var_mtcontig_annotated}) str
(" \\) p n
(261) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_links}) str
(" \\) p n
(262) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_links_number}) str
(" \\) p n
(263) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_links_order}) str
(" \\) p n
(264) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_links_contig}) str
(" \\) p n
(265) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_links_contig_na}) str
(" \\) p n
(266) # () S 8 T () S 16 T (2>") S
($_polap_output_dest) str
(") p n
(267) # () N
(268) # () S 8 T (_polap_log2_file ") S
(${_polap_var_gfa_links_number}) str
(") p n
(269) # () S 8 T (_polap_log2_file ") S
(${_polap_var_gfa_links_order}) str
(") p n
(270) # () S 8 T (_polap_log2_file ") S
(${_polap_var_gfa_links_contig}) str
(") p n
(271) # () S 8 T (_polap_log2_file ") S
(${_polap_var_gfa_links_contig_na}) str
(") p n
(272) # () N
(273) # () S 8 T (# Find connected components using Python script) N
(274) # () S 8 T (_polap_log2 ") S
(finding connected components by the depth-filtered contigs) str
(") p n
(275) # () S 8 T (python ") S
($WDIR) str
("/run-polap-select-contigs-4-find-connected-components.py \\) p n
(276) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_links_number}) str
(" \\) p n
(277) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_links_contig}) str
(" \\) p n
(278) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_links_seed}) str
(" \\) p n
(279) # () S 8 T () S 16 T (2>") S
($_polap_output_dest) str
(") p n
(280) # () N
(281) # () S 8 T (_polap_log2_file ") S
(${_polap_var_gfa_links_seed}) str
(") p n
(282) # () N
(283) # () S 8 T (# Choose final mitochondrial contigs) N
(284) # () S 8 T (_polap_log2 ") S
(converting the depth-filtered contigs in edge with numbers) str
(") p n
(285) # () S 8 T (") S
($WDIR) str
("/run-polap-select-contigs-5-gfa-mtcontig.R \\) p n
(286) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_links_seed}) str
(" \\) p n
(287) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_links_order}) str
(" \\) p n
(288) # () S 8 T () S 16 T (") S
(${_polap_var_gfa_links_mtcontig}) str
(" \\) p n
(289) # () S 8 T () S 16 T (2>") S
($_polap_output_dest) str
(") p n
(290) # () N
(291) # () S 8 T (_polap_log2_file ") S
(${_polap_var_gfa_links_mtcontig}) str
(") p n
(292) # () N
(293) # () S 8 T (_polap_log2 ") S
(concatenating the depth-filtered edges and NA edges?) str
(") p n
(294) # () S 8 T (cat ") S
(${_polap_var_gfa_links_mtcontig}) str
(" ") p
(${_polap_var_gfa_links_contig_na}) str
(" |) p n
(295) # () S 8 T () S 16 T (sort | uniq >") S
(${MTCONTIGNAME}) str
(") p n
(296) # () S 8 T (_polap_log1_file ") S
(output: ${MTCONTIGNAME}) str
(") p n
(297) # () N
(298) # () S 8 T (") S
($WDIR) str
("/run-polap-select-contigs-by-table-2.R \\) p n
(299) # () S 8 T () S 16 T (-t ") S
(${_polap_var_annotation_table}) str
(" \\) p n
(300) # () S 8 T () S 16 T (-m ") S
(${MTCONTIGNAME}) str
(" \\) p n
(301) # () S 8 T () S 16 T (-o ") S
(${_polap_var_mtcontig_base}) str
(" \\) p n
(302) # () S 8 T () S 16 T (2>") S
($_polap_output_dest) str
(") p n
(303) # () N
(304) # () S 8 T (# _polap_log2_file ") S
(  output1: ${_polap_var_mtcontig_stats}) str
(") p n
(305) # () S 8 T (_polap_log2_file ") S
(  output2: ${_polap_var_mtcontig_annotated}) str
(") p n
(306) # () N
(run-polap-function-select-contigs-by.sh) (Page 6/7) (10\354M-^[M-^T 06, 24 15:27) title
border
grestore
(Printed by Sang Chul Choi) rhead
(run-polap-function-select-contigs-by.sh) (6/7) (\354M-^]\274\354M-^ZM-^T\354M-^]\274 10\354M-^[M-^T 06, 2024) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 4.015896 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(307) # () p 8 T (_polap_log2 ") S
(Function end: $\(echo $FUNCNAME | sed s/_run_polap_//\)) str
(") p n
(308) # () S 8 T (# Disable debugging ) S
(if) K
( previously enabled) p n
(309) # () S 8 T ([ ") S
($DEBUG) str
(" -eq 1 ] && set +x) p n
(310) # (}) N
(run-polap-function-select-contigs-by.sh) (Page 7/7) (10\354M-^[M-^T 06, 24 15:27) title
border
grestore
(Printed by Sang Chul Choi) rhead
(run-polap-function-select-contigs-by.sh) (7/7) (\354M-^]\274\354M-^ZM-^T\354M-^]\274 10\354M-^[M-^T 06, 2024) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
