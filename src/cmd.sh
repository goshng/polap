#!/usr/bin/env bash
################################################################################
# This file is part of ebp.
#
# ebp is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# ebp is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# ebp. If not, see <https://www.gnu.org/licenses/>.
################################################################################

# Created by argbash-init v2.10.0
# DEFINE_SCRIPT_DIR([])
# INCLUDE_PARSING_CODE([ebp-parsing.sh])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# OTHER STUFF GENERATED BY Argbash
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || {
	echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2
	exit 2
}
. "$script_dir/ebp-parsing.sh" # '.' means 'source'

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# vvv  PLACE YOUR CODE HERE  vvv

# called before any other function calls

# Sets the default valuse for global variables
function _ebp_default {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Utility shell functions
################################################################################

################################################################################
# Uses config files.
# https://unix.stackexchange.com/a/331965
################################################################################
config_read_file() {
	(grep -E "^${2}=" -m 1 "${1}" 2>/dev/null || echo "VAR=__UNDEFINED__") | head -n 1 | cut -d '=' -f 2-
}

config_get() {
	val="$(config_read_file $CONFIG "${1}")"
	if [ "${val}" = "__UNDEFINED__" ]; then
		val="$(config_read_file $CONFIG.defaults "${1}")"
	fi
	printf -- "%s" "${val}"
}

config_set() {
	val="$(config_get "${1}")"
	if [ "${val}" = "__UNDEFINED__" ]; then
		val="${1}"
		printf "%s=%s\n" "${val}" "${2}" >>$CONFIG
		echoall "CONFIG: adds ${1}=${2}"
	else
		val="${1}"
		grep -v "${val}=" $CONFIG >$CONFIG.b
		printf "%s=%s\n" "${val}" "${2}" >$CONFIG
		cat $CONFIG.b >>$CONFIG
		echoall "CONFIG: updates ${1}=${2}"
		rm $CONFIG.b
	fi
}

config_del() {
	val="$(config_get "${1}")"
	if [ "${val}" = "__UNDEFINED__" ]; then
		val="${1}"
		echoall "CONFIG: no such key ${1}"
	else
		val="${1}"
		grep -v "${val}=" $CONFIG >$CONFIG.b
		cat $CONFIG.b >$CONFIG
		echoall "CONFIG: deletes key ${1}"
		rm $CONFIG.b
	fi
}

config_check() {
	if [[ "${1}" == "__UNDEFINED__" ]]; then
		echoall "LOG: no ${2} key in the config: [$CONFIG]"
		echoerr "SUGGESTION: add a line starting with ${2}= to the config."
		exit $EXIT_FAIL
	fi
}

config_create() {
	echo "taxon=$TAXON"
	echo "min_gene_count=0"
	echo "min_cds_length=150"
	echo "min_percent_number_sequences_locus=50"
	echo "parallel_nt=100"
}

nodefile_create() {
	echo ":"
}

is_integer() {
	local var="$1"

	if [[ "$var" =~ ^-?[0-9]+$ ]]; then
		echo "true"
	else
		echo "false"
	fi
}

# Function to display a progress bar
show_progress() {
	local progress=$1
	local total=$2
	local bar_width=50
	local filled=$((progress * bar_width / total))
	local empty=$((bar_width - filled))

	printf "\r[" >&2
	for ((i = 0; i < filled; i++)); do
		printf "#" >&2
	done
	for ((i = 0; i < empty; i++)); do
		printf " " >&2
	done
	printf "] %3d%%" $((progress * 100 / total)) >&2
}

# Function to process input
process_input() {
	while IFS= read -r line; do
		if [[ "$line" == *DESCRIPTION* ]]; then
			echo "${line%%DESCRIPTION*}"
		fi
	done
}

process_input2() {
	while IFS= read -r line; do
		if [[ "$line" == *DESCRIPTION* ]]; then
			before_description="${line%%DESCRIPTION*}"
			# Replace all spaces after the first space with underscores
			first_space_replaced=$(echo "$before_description" | sed -E 's/ /_/2g' | sed 's/_$//')
			echo "$first_space_replaced"
		fi
	done
}

################################################################################
# Splits inputs.
# Arguments:
#   folder to split
#   number of splits
################################################################################
function split-input {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	DATA_DIR=$1

	SIZE_DIR=$(du -bs $DATA_DIR/input | cut -f1)
	SIZE_MEDIUM=$((SIZE_DIR / $PARALLEL_NT))
	MAX_SIZE_FILE=$(find $DATA_DIR/input -maxdepth 1 -printf '%s\n' | sort -nr | head -n 1)
	SIZE_MEDIUM=$((SIZE_MEDIUM > MAX_SIZE_FILE ? SIZE_MEDIUM : MAX_SIZE_FILE))
	SIZE_MEDIUM=$((SIZE_MEDIUM + 2 ** 20)) # add 1mb
	dirsplit -m -s $SIZE_MEDIUM $DATA_DIR/input -p $DATA_DIR/inputs/vol

	ls $DATA_DIR/inputs/ | parallel mkdir $DATA_DIR/outputs/{}

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Global variables in ebp-parsing.sh
################################################################################
# OS_TYPE: Linux or Darwin
# CPU_COUNT: the number of CPUs
################################################################################

################################################################################
# Initializes EBP analysis in an empty folder.
# Requirements:
#   no config file of config.ebp
# Arguments:
#   input: <taxon> or [default:present workding directory]
# Outputs:
#   creates the config file.
#   creates empty files for command completion
#   errors on the already-exist config file.
################################################################################
function _run_ebp_init {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Initializes the working directory for an EBP analysis.
input1: a taxonomy term [default:present directory name]
Example: $(basename $0) ${_arg_menu[0]} [Aves]
conda env create -f supercrunch-conda-env-ebp.yml
conda env remove --name supercrunch
hint: something inside the brackets is optional e.g., [Aves]
      you could type in just like this.
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: reset
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		TAXON="$(basename $PWD | sed 's/.*/\u&/')"
	else
		TAXON=${_arg_menu[1]}
	fi

	if [ -f "$CONFIG" ]; then
		echoerr "SUGGESTION: delete [$CONFIG] if you really want to init."
		echoerr "SUGGESTION: rm $CONFIG"
		die "ERROR: $CONFIG exisits."
	fi
	_run_ebp_make-commands
	config_create >$CONFIG

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Lists menus available.
# Arguments:
#   [all] or number
# Outputs:
#   menus to STDERR
################################################################################
function _run_ebp_list {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Lists subcommands or menu-1 of EBP
You need to execute make-commands menu if nothing is displayed.
Example: $(basename $0) make-commands
         $(basename $0) ${_arg_menu[0]} [all|1|2|3|4|5|6|7|8|9]
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "all" ]]; then
		find . -maxdepth 1 -type f -empty -exec basename {} \; |
			sort >&2
	elif [[ "${_arg_menu[1]}" =~ ^[0-9]+$ ]]; then
		find . -maxdepth 1 -type f -empty -exec basename {} \; |
			sort |
			grep -E "sc-${_arg_menu[1]}+-?[0-9]*-[a-zA-Z]+" >&2
	else
		find . -maxdepth 1 -type f -empty -exec basename {} \; |
			sort |
			grep -E 'sc-[0-9]+-[a-zA-Z]+' >&2
	fi

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Creates an output directory.
# Outputs:
#   creates an output folder.
#   add a key of out with the output folder.
################################################################################
function _run_ebp_reset {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Creates an output directory and sets the key [out] in the config file.
Uses the out key's value if no -o option is given.
The default is [o] if the config has no out key.
Example: $(basename $0) ${_arg_menu[0]} [-o ${ODIR}]
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-1-prepare-taxon
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: creates an output directory -> [$ODIR]"
	mkdir -p $ODIR
	config_set out $ODIR
	nodefile_create >$ODIR/nodefile

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _run_ebp_clean {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	_run_ebp_clean-commands
	touch make-commands

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _run_ebp_make-commands {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	rm -f sc-*
	grep "^function _run_ebp_sc" "$WDIR"/ebp.sh | grep run_ebp | sed 's/function _run_ebp_//' | sed 's/ {//' | parallel touch {}
	touch make-commands

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _run_ebp_clean-commands {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	grep "^function _run_ebp_sc" "$WDIR"/ebp.sh | grep run_ebp | sed 's/function _run_ebp_//' | sed 's/ {//' | parallel rm -f {}

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Runs a workflow for a data set with a small number of taxa.
################################################################################
function _run_ebp_sc-workflow-local {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "Runs a workflow for a data set with taxa less than 10."
		echoerr "Example: $(basename $0) ${_arg_menu[0]}"
		exit $EXIT_SUCCESS
	fi

	_run_ebp_init
	_run_ebp_reset
	_run_ebp_sc-1-prepare-taxon
	_run_ebp_sc-2-download-genomes
	_run_ebp_sc-3-prepare-genes
	_run_ebp_sc-4-prepare-loci
	_run_ebp_sc-5-similarity-search
	_run_ebp_sc-6-sequence-selection
	_run_ebp_sc-7-sequence-alignment
	_run_ebp_sc-8-1-gene-trees
	_run_ebp_sc-9-species-tree

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Workflow
################################################################################
function _run_ebp_sc-workflow {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Runs a workflow for a data set with a large number of taxa.
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: Nothing.
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	_run_ebp_init
	_run_ebp_reset
	_run_ebp_sc-1-prepare-taxon
	_run_ebp_sc-2-download-genomes
	_run_ebp_sc-3-prepare-genes
	_run_ebp_sc-4-prepare-loci
	_run_ebp_sc-5-similarity-search
	_run_ebp_sc-6-sequence-selection
	_run_ebp_sc-7-sequence-alignment
	_run_ebp_sc-8-1-gene-trees
	_run_ebp_sc-9-species-tree

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Prepares a data set for a taxon.
# <minimum number of genes for a genome> <taxonomy term>
# Arguments:
#   input1: minimum gene counts [default:0]
#   input2: taxonomy term [default:config:taxon]
# Outputs:
#   $ODIR/genome-assembly.tsv
# e.g., 10000
# e.g., 0 Aves
################################################################################
function _run_ebp_sc-1-prepare-taxon {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Prepares a list of genome assemblies for a taxonomy term from NCBI.
# Arguments:
#   input1: a minimum number of genes [default:config:min_gene_count]
#   input2: taxonomy term [default:config:taxon]
# Outputs:
#   $ODIR/genome-assembly.tsv
Example: $(basename $0) ${_arg_menu[0]} [10000 [Aves]]
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-2-download-genomes
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [ ! -d $ODIR ]; then
		echoall "ERROR: no such output directory [$ODIR]"
		echoerr "SUGGESTION: reset"
		exit $EXIT_ERROR
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		MIN_GENE_COUNT=0
	else
		MIN_GENE_COUNT=${_arg_menu[1]}
	fi
	if [[ ${_arg_menu[2]} == "infile" ]]; then
		TAXON="$(config_get taxon)"
	else
		TAXON=${_arg_menu[2]}
	fi
	if [[ $(is_integer "$MIN_GENE_COUNT") == "false" ]]; then
		echoerr "ERROR: $MIN_GENE_COUNT is not a proper number."
		exit $EXIT_ERROR
	fi

	_arg_menu[1]=$TAXON
	_run_ebp_sc-1-1-get-id-of-taxon
	_arg_menu[1]="$(config_get taxid)"
	_run_ebp_sc-1-2-get-genome-summary-by-taxonomy-id
	_arg_menu[1]=$MIN_GENE_COUNT
	_run_ebp_sc-1-3-select-genome-by-gene-count
	_run_ebp_sc-1-4-filter-duplicate-genomes

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Gets the taxonomy ID of a taxonomy term from NCBI.
# Arguments:
#   input1: taxonomy term [default:config:taxon]
# Outputs:
#   updates the config file with the taxonomy terms and ID.
################################################################################
function _run_ebp_sc-1-1-get-id-of-taxon {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Gets the taxonomy ID of the taxonomy term from NCBI.
Updates the config file with the taxonomy terms and ID.
input1: taxonomy term [default:config:taxon]
Example: $(basename $0) ${_arg_menu[0]} [Aves]
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: taxonomy ID of $TAXON is [$TAXID].
LOG: your taxonomy ID is added to the config.
NEXT: sc-1-2-get-genome-summary-by-taxonomy-id
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		TAXON="$(config_get taxon)" # how to just read a value without echoing
		config_check $TAXON taxon
	else
		TAXON=${_arg_menu[1]}
	fi
	echoall "LOG: your taxon is $TAXON."

	cd $ODIR
	mkdir -p taxonomy
	datasets summary taxonomy taxon $TAXON --as-json-lines \
		>taxonomy/datasets-summary-taxonomy.json
	TAXID=$(cat taxonomy/datasets-summary-taxonomy.json |
		dataformat tsv taxonomy --template tax-summary |
		csvtk -t cut -f "Taxid" |
		csvtk del-header)
	cd - >/dev/null

	config_set taxon $TAXON
	config_set taxid $TAXID

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Gets genome assemblies summary for a clade.
# Arguments:
#   input1: taxid
# Outputs:
#   taxonomy/genome-summary.tsv
################################################################################
function _run_ebp_sc-1-2-get-genome-summary-by-taxonomy-id {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	# https://stackoverflow.com/questions/1167746/how-to-assign-a-heredoc-value-to-a-variable-in-bash
	help_message=$(
		cat <<HEREDOC
Gets the genome summary of all the species under the taxonomy ID
input1: taxonomy ID [default:config:taxid]
Creates [$ODIR/taxonomy/genome-summary.tsv]
Example: $(basename $0) ${_arg_menu[0]} [8782]
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
COMMENT: determine the minimum of gene counts to filter out genomes \
with a small number of genes. 
COMMENT: less -S $ODIR/taxonomy/genome-summary.tsv
COMMENT: genome-summary.tsv has four columns.
COMMENT: accession, taxon ID, gene counts, taxon name.
COMMENT: then, edit [$CONFIG] to change min_gene_count
NEXT: sc-1-3-select-genome-by-gene-count
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		TAXID="$(config_get taxid)"
		config_check $TAXID taxid
	else
		TAXID=${_arg_menu[1]}
	fi
	echoall "LOG: your taxonomy ID is [$TAXID]."

	cd $ODIR
	datasets summary genome taxon $TAXID --as-json-lines --annotated \
		>taxonomy/genome-summary.json
	cat taxonomy/genome-summary.json |
		dataformat tsv genome |
		tr -d '""' >taxonomy/genome-summary.txt
	csvtk -t cut -F \
		-f "Assembly Accession,Organism Taxonomic ID,*Protein*,Organism Name" \
		taxonomy/genome-summary.txt |
		sort | uniq | sort -n -k3 >taxonomy/genome-summary.tsv
	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Filters out genomes with genes less than a given number.
# Arguments:
#   input: taxonomy/genome-summary.tsv
#   input: config.ebp -> min_gene_count or <minimum of gene counts>
# Outputs:
#   output: taxonomy/genome-assembly-edit.tsv
################################################################################
function _run_ebp_sc-1-3-select-genome-by-gene-count {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Filters out genomes with a small number of genes.
input1: a minimum number of genes [default:config:min_gene_count]
Example: $(basename $0) ${_arg_menu[0]} [10000]
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: datasets-select-assembly-by-gene-counts.R -> \
[$ODIR/taxonomy/genome-assembly-edit.tsv]
NEXT: sc-1-4-filter-duplicate-genomes
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		MIN_GENE_COUNT="$(config_get min_gene_count)"
		config_check $MIN_GENE_COUNT min_gene_count
	else
		MIN_GENE_COUNT=${_arg_menu[1]}
	fi

	if [[ $(is_integer "$MIN_GENE_COUNT") == "false" ]]; then
		echoerr "ERROR: $MIN_GENE_COUNT is not a proper number."
		exit $EXIT_ERROR
	fi
	echoall "LOG: the minimum number of genes for a genome is $MIN_GENE_COUNT."

	cd $ODIR
	"$WDIR"/datasets-select-assembly-by-gene-counts.R \
		taxonomy/genome-summary.tsv \
		$MIN_GENE_COUNT \
		taxonomy/genome-assembly-edit.tsv \
		taxonomy/genome-assembly-duplicates.tsv 2>/dev/null
	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Filters out duplicate genomes.
#   input: taxonomy/genome-assembly-edit.tsv
# Outputs:
#   genome-assembly.tsv
################################################################################
function _run_ebp_sc-1-4-filter-duplicate-genomes {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Filters out duplicate genomes for a species.
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: deleting genome records with sp., and aff. as well.
LOG: clean-two-part-species.R -> [$ODIR/genome-assembly.tsv]
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	cd $ODIR
	"$WDIR"/clean-two-part-species.R \
		two \
		taxonomy/genome-assembly-edit.tsv \
		taxonomy/genome-assembly-unique.tsv 2>/dev/null

	csvtk -t del-header taxonomy/genome-assembly-unique.tsv |
		grep -v " sp. " |
		grep -v " aff. " \
			>genome-assembly.tsv
	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Downloads genome assemblies.
# NCBI has some limit for a download so we split the downloads.
# Inputs:
#   $ODIR/genome-assembly.tsv
# Outputs:
#   genome_dataset
################################################################################
function _run_ebp_sc-2-download-genomes {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Downloads genome assemblies in [$ODIR/genome-assembly.tsv]
# Inputs:
#   $ODIR/genome-assembly.tsv
# Outputs:
#   genome_dataset
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-3-prepare-genes
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [ -d genome_dataset ]; then
		die "ERROR: [genome_dataset] already exists."
	fi

	echoerr "LOG: spliting the list of genome assemblies before downloading ..."
	_arg_menu[1]=snumber
	_ebp_sc-2-1-split-genome-list

	echoerr "LOG: downloding genome assemblies ..."
	# Initialize the progress
	total_lines=$(ls $ODIR/x* | wc -l)
	current_line=0

	for f in $(ls $ODIR/x*); do
		_arg_menu[1]=$f
		_ebp_sc-2-2-download-genomes
		# Update the progress
		current_line=$((current_line + 1))
		show_progress "$current_line" "$total_lines"
	done
	echoerr -e "\nDownloading complete!"

	# Deletes split files.
	rm $ODIR/x???????

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _ebp_sc-2-1-split-genome-list {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "Splits [$ODIR/genome-assembly.tsv]"
		echoerr "input1: the number of genome assemblies per chunk"
		echoerr "Example: $(basename $0) ${_arg_menu[0]} [10]"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		N=10
	else
		N=${_arg_menu[1]}
	fi

	cd $ODIR
	split -a 7 -d --numeric-suffixes=1 -l $N genome-assembly.tsv
	cd - >/dev/null

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _ebp_sc-2-2-download-genomes {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "Downloads genome assemblies in a text file."
		echoerr "input1: a text file like these two lines"
		echoerr "GCF_000695815.1 57068   15052   Acanthisitta chloris"
		echoerr "GCF_929443795.1 8957    16976   Accipiter gentilis"
		echoerr "Example: $(basename $0) ${_arg_menu[0]} [10]"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		F=$ODIR/genome-assembly.tsv
	else
		F=${_arg_menu[1]}
	fi

	cut -f1 $F |
		xargs datasets download genome accession --dehydrated --no-progressbar \
			--include cds,protein,gff3,seq-report
	unzip -qqo ncbi_dataset.zip -d genome_dataset
	datasets rehydrate --directory genome_dataset/ --no-progressbar

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Prepares CDS and AA seq from genome assemblies before clustering.
# Inputs:
#   genome_dataset
# Outputs:
#   $ODIR/gene/cds/{1}.fna
#   $ODIR/gene/aa/{1}.faa
################################################################################
function _run_ebp_sc-3-prepare-genes {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Prepares CDS and AA sequences from genome assemblies before clustering
# Inputs:
#   genome_dataset
# Outputs:
#   $ODIR/gene/cds/{1}.fna
#   $ODIR/gene/aa/{1}.faa
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	_run_ebp_sc-3-1-cds-single-line-fasta
	_run_ebp_sc-3-2-cds-rename-sequences
	_run_ebp_sc-3-3-select-one-cds-gene
	_run_ebp_sc-3-4-filter-cds
	_run_ebp_sc-3-5-get-taxonomy-from-genes
	_run_ebp_sc-3-6-assess-taxonomy

	end_message=$(
		cat <<HEREDOC
NEXT: sc-4-prepare-loci
HEREDOC
	)

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Converts the CDS sequence FASTA files to single-line FASTA files.
# Inputs:
#   genome_dataset/ncbi_dataset/data/{1}/cds_from_genomic.fna
# Outputs:
#   $ODIR/gene/cds-singleline/{1}.fna
################################################################################
function _run_ebp_sc-3-1-cds-single-line-fasta {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Converts the CDS sequence FASTA to a single-line FASTA
# Inputs:
#   genome_dataset/ncbi_dataset/data/{1}/cds_from_genomic.fna
# Outputs:
#   $ODIR/gene/cds-singleline/{1}.fna
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-3-2-cds-rename-sequences
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: converting the CDS sequence FASTA to a single-line FASTA \
[genome_dataset/ncbi_dataset/data/{1}/cds_from_genomic.fna] -> [$ODIR/gene/cds-singleline/{1}.fna]"

	cd $ODIR
	mkdir -p gene/cds-singleline
	cat genome-assembly.tsv |
		parallel \
			--colsep '\t' \
			--results gene/cds-singleline-outdir \
			--bar \
			seqtk seq \
			../genome_dataset/ncbi_dataset/data/{1}/cds_from_genomic.fna \
			">" gene/cds-singleline/{1}.fna
	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Prepares a starting sequence data set for supercrunch
# Inputs:
#   $ODIR/gene/cds-singleline/{1}.fna
# Outputs:
#   $ODIR/gene/cds-renamed/{1}.fna
# Reference:
# https://github.com/dportik/SuperCRUNCH/wiki/2:-Starting-Sequences
################################################################################
function _run_ebp_sc-3-2-cds-rename-sequences {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Converts the CDS sequence FASTA to a single-line FASTA
# Inputs:
#   $ODIR/gene/cds-singleline/{1}.fna
# Outputs:
#   $ODIR/gene/cds-renamed/{1}.fna
# https://github.com/dportik/SuperCRUNCH/wiki/2:-Starting-Sequences
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-3-3-select-one-cds-gene
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: renaming CDS FASTA sequences for SuperCRUNCH workflow \
[$ODIR/gene/cds-singleline/*.fna] -> [$ODIR/gene/cds-renamed/*.fna]"

	cd $ODIR
	mkdir -p gene/cds-renamed
	cat genome-assembly.tsv |
		parallel \
			--colsep '\t' \
			--results gene/cds-renamed-outdir \
			--bar \
			perl "$WDIR"/supercrunch-make-ncbi-cds-simple.pl {4} \
			"<" gene/cds-singleline/{1}.fna \
			">" gene/cds-renamed/{1}.fna
	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Selects only one of the multiple CDS sequences for a given gene.
# TODO: make sure that a single CDS per gene is selected.
# Inputs:
#   genome_dataset/ncbi_dataset/data/{1}/genomic.gff
# Outputs:
#   $ODIR/gene/single/{1}.txt for each genome assembly
# This is somewhat manual work.
# Inspect genome's gff to select CDS regions for a gene.
# e.g., GCA_035582795.1
#
################################################################################
function _run_ebp_sc-3-3-select-one-cds-gene {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Selects only one of multiple CDS sequences for a gene.
A gene could have multiple CDS regions.
A gene tree should relate homologs not different version of mRNAs.
So, a single CDS represents a gene.
input: genome_dataset/ncbi_dataset/data/{1}/genomic.gff
output: $ODIR/gene/single/{1}.txt for each genome assembly
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-3-4-filter-cds
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: chooses a single CDS per gene for each genome assembly \
[genome_dataset/ncbi_dataset/data/{1}/genomic.gff] -> [$ODIR/gene/single/{1}.txt]"

	cd $ODIR
	rm -rf gene/single
	mkdir -p gene/single
	cat genome-assembly.tsv |
		parallel \
			--colsep '\t' \
			--results gene/single-outdir \
			--bar \
			"$WDIR"/list-genes-from-gff.R \
			../genome_dataset/ncbi_dataset/data/{1}/genomic.gff \
			gene/single/{1}.txt
	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Filters out short or duplicate CDS sequences.
# Arguments:
#   number: the minimum length of CDS sequences
# Outputs:
#   $ODIR/gene/cds/
#   $ODIR/gene/aa/
# Uses:
#   $ODIR/gene/single/{1}.txt
################################################################################
function _run_ebp_sc-3-4-filter-cds {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Filters out short or duplicate CDS sequences.
Prepares AA sequences only for those selected CDS sequences.
INFO: duplicates sometimes are present in the data.
input1: a minimum length of CDS sequences
output: [$ODIR/gene/cds], [$ODIR/gene/aa]
check: [$ODIR/gene/cds.txt] vs. [$ODIR/gene/aa.txt] should be the same.
Example: $(basename $0) ${_arg_menu[0]} [150]
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
ASSERT: [$ODIR/gene/cds.txt] == [$ODIR/gene/aa.txt]
NEXT: sc-3-5-get-taxonomy-from-genes
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		MIN_CDS_LENGTH="$(config_get min_cds_length)"
		config_check $MIN_CDS_LENGTH min_cds_length
	else
		MIN_CDS_LENGTH=${_arg_menu[1]}
	fi

	cd $ODIR
	rm -rf gene/{cds,aa}
	mkdir -p gene/{cds,aa}

	echoall "LOG: filtering short CDS sequences ..."
	echoall "LOG: [$ODIR/gene/cds-renamed/*.fna] -> [$ODIR/gene/cds/*.fna]"
	echoall "LOG: minimum CDS length is [$MIN_CDS_LENGTH]"
	# TODO: gene/single/*.txt exists.
	cat genome-assembly.tsv |
		parallel \
			--colsep '\t' \
			--results gene/cds-outdir \
			--bar \
			seqkit grep -f gene/single/{1}.txt \
			gene/cds-renamed/{1}.fna "|" seqkit rmdup "|" seqkit seq -m $MIN_CDS_LENGTH \
			-o gene/cds/{1}.fna

	cat gene/cds/*.fna | seqkit seq -ni | sort >gene/cds.txt
	echoall "LOG: CDS sequence IDs -> [$ODIR/gene/cds.txt]"

	echoall "LOG: selecting CDS-matching AA sequences \
[genome_dataset/ncbi_dataset/data/{1}/protein.faa] -> [$ODIR/gene/aa/{1}.faa]"
	cat genome-assembly.tsv |
		parallel \
			--colsep '\t' \
			--results gene/aa-outdir \
			--bar \
			seqkit grep -f gene/cds.txt \
			../genome_dataset/ncbi_dataset/data/{1}/protein.faa "|" seqkit rmdup \
			-o gene/aa/{1}.faa

	cat gene/aa/*.faa | seqkit seq -ni | sort >gene/aa.txt
	echoall "LOG: AA sequence IDs -> [$ODIR/gene/aa.txt]"

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Gets taxon names from the starting data set.
# https://github.com/dportik/SuperCRUNCH/wiki/3:-Assessing-Taxonomy
# Outputs:
#   [$ODIR/fastaset/out/Species_Names.txt]
# Time: 20 mins
################################################################################
function _run_ebp_sc-3-5-get-taxonomy-from-genes {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Gets taxon names from the starting data set.
SuperCRUNCH:Fasta_Get_Taxa -> [$ODIR/fastaset/out/Species_Names.txt]
https://github.com/dportik/SuperCRUNCH/wiki/3:-Assessing-Taxonomy
# Outputs:
#   [$ODIR/fastaset/out/Species_Names.txt]
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-3-6-assess-taxonomy
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	cd $ODIR
	rm -rf fastaset
	mkdir -p fastaset/{input,output}
	ls gene/cds/*.fna | parallel cp {} fastaset/input/{/.}.fa
	python "$WDIR"/supercrunch-scripts/Fasta_Get_Taxa.py \
		-i $PWD/fastaset/input/ \
		-o $PWD/fastaset/output/
	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Assesses taxon names
# https://github.com/dportik/SuperCRUNCH/wiki/3:-Assessing-Taxonomy
################################################################################
function _run_ebp_sc-3-6-assess-taxonomy {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Assesses taxon names
SuperCRUNCH:Taxa_Assessment [$ODIR/fastaset/input] -> [$ODIR/analysis/output/]
https://github.com/dportik/SuperCRUNCH/wiki/3:-Assessing-Taxonomy
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-3-7-list-cds-fasta
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	cd $ODIR
	rm -rf analysis
	mkdir -p analysis/output
	cat fastaset/input/*.fa >analysis/startseqs.fasta
	python "$WDIR"/supercrunch-scripts/Taxa_Assessment.py \
		-i $PWD/analysis/startseqs.fasta \
		-t $PWD/fastaset/output/Species_Names.txt \
		-o $PWD/analysis/output
	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

# Function to prompt for confirmation
confirm() {
	while true; do
		read -p "$1 [y/n]: " response
		case "$response" in
		[Yy]*) return 0 ;;
		[Nn]*) return 1 ;;
		*) echoerr "Please answer yes (y) or no (n)." ;;
		esac
	done
}

################################################################################
# Lists CDS FASTA files to filter out too-small-number-of-sequence genome
# assemblies.
# Arguments:
#   [aa]
################################################################################
function _run_ebp_sc-3-7-list-cds-fasta {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Lists CDS FASTA files to filter out too-small-number-of-sequence genome 
assemblies.
Example: $(basename $0) ${_arg_menu[0]} [aa]
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
Determine the minimum file size to filter out too-small-number-of-sequence
genomes.
NEXT: sc-3-8-filter-genomes-with-too-small-genes
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		echoerr "LOG: listing CDS sequence FASTA files at [$ODIR/gene/cds]"
		ls -lS $ODIR/gene/cds >&2
	else
		echoerr "LOG: listing AA sequence FASTA files at [$ODIR/gene/aa]"
		ls -lS $ODIR/gene/aa >&2
	fi

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Deletes CDS or AA sequence files with too small number of sequences.
################################################################################
function _run_ebp_sc-3-8-filter-genomes-with-too-small-genes {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Deletes CDS or AA sequence files with too small number of sequences.
Example: $(basename $0) ${_arg_menu[0]} cds [1000]
Example: $(basename $0) ${_arg_menu[0]} aa [1000]
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: 3-9-recreate-genome-summary-by-removing-too-small-genes
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		echoerr "ERROR: <menu-2> is required: cds or aa"
		exit $EXIT_SUCCESS
	elif [[ ${_arg_menu[1]} == "cds" ]]; then
		directory=$ODIR/gene/cds
		min_size=${_arg_menu[2]}
	else
		directory=$ODIR/gene/aa
		min_size=${_arg_menu[2]}
	fi
	if [[ $(is_integer "$min_size") == "false" ]]; then
		die "ERROR: $min_size is not a proper number."
	fi

	# Construct the find command
	find_command="find \"$directory\" -type f"

	if [ -n "$min_size" ]; then
		find_command+=" -size -${min_size}c"
	fi

	# Execute the find command and delete the files
	# eval "$find_command -exec rm -f {} \;"
	echoerr "$find_command -exec rm -f {} \;"

	# Prompt the user for input
	# read -p "Do you want to delete such small-number-of-gene genomes: " user_input

	# Confirm the user's input
	if confirm "Do you want to delete such small-number-of-gene genomes?"; then
		echoerr "deleting the files."
		eval "$find_command -exec rm -f {} \;"
	else
		echoerr "You cancelled the operation."
	fi

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Recreate genome summary with a new data set.
# Arguments:
#   [aa]
# Outputs:
#   $ODIR/genome-assembly-filtered.tsv
################################################################################
function _run_ebp_sc-3-9-recreate-genome-summary-by-removing-too-small-genes {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Recreate genome summary with a new data set.
# Outputs:
#   $ODIR/genome-assembly-filtered.tsv
Example: $(basename $0) ${_arg_menu[0]}
Example: $(basename $0) ${_arg_menu[0]} aa
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: [$ODIR/genome-assembly-filtered.tsv]
NEXT: go to step 4!
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		list_file=$ODIR/gene/cds-list.txt
		ls -1 $ODIR/gene/cds | sed 's/.fna//' >$list_file
	else
		list_file=$ODIR/gene/aa-list.txt
		ls -1 $ODIR/gene/aa | sed 's/.faa//' >$list_file
	fi

	text_file=$ODIR/genome-assembly.tsv

	# Read the list of strings and create a grep pattern
	pattern=$(awk '{print "^"$0"[[:space:]]"}' "$list_file" | tr '\n' '|' | sed 's/|$//')

	# Use grep to filter lines in the text file
	grep -E "$pattern" "$text_file" >$ODIR/genome-assembly-filtered.tsv

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Uses OrthoFinder to prepare homologs.
# Arguments:
#   [remote] executing jobs at remote computers.
#   Default is to execute them at the local computer.
################################################################################
function _run_ebp_sc-4-prepare-loci {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# Uses OrthoFinder to prepare homologs.
# Arguments:
#   [remote] executing jobs at remote computers.
#   Default is to execute them at the local computer.
You may want to create $ODIR/nodefile for using GNU Parallel.
Example: $(basename $0) ${_arg_menu[0]} [remote]
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		_run_ebp_sc-4-1-orthofinder
	elif [[ ${_arg_menu[1]} == "remote" ]]; then
		_run_ebp_sc-4-1-split-orthofinder-1
		_run_ebp_sc-4-1-split-orthofinder-2
		_run_ebp_sc-4-1-split-orthofinder-3
		# _run_ebp_sc-4-1-split-orthofinder-4-optional
	else
		die "ERROR: option is either remote or none."
	fi

	_run_ebp_sc-4-2-orthofinder
	_run_ebp_sc-4-3-orthofinder
	_run_ebp_sc-4-4-orthofinder

	end_message=$(
		cat <<HEREDOC
NEXT: go to step 5!
HEREDOC
	)

	echoerr "${end_message}"
	echoall "LOG: ready to SuperCRUNCH:Similarity Searches and Filtering"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Executes OrthoFinder.
# Inputs:
#   $ODIR/gene/aa/{1}.faa
# Outputs:
#   $ODIR/orthofinder
################################################################################
function _run_ebp_sc-4-1-orthofinder {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Executes OrthoFinder on the AA sequences.
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-4-2-orthofinder
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: orthofinder workflow for the AA sequences: [$ODIR/gene/aa]."
	DATA_DIR=orthofinder-og
	cd $ODIR
	rm -rf $DATA_DIR
	mkdir -p $DATA_DIR
	cp gene/aa/*.faa $DATA_DIR
	# orthofinder -f orthofinder -n 1
	orthofinder -f $DATA_DIR -og -n 1

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Prepares a parllellization of OrthoFinder.
# Outputs:
#   $ODIR/orthofinder-op
#   $ODIR/run-orthofinder.txt
################################################################################
function _run_ebp_sc-4-1-split-orthofinder-1 {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# Prepares a parllellization of OrthoFinder.
# Outputs:
#   $ODIR/orthofinder-op
#   $ODIR/run-orthofinder.txt
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-4-1-split-orthofinder-2
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "Prepares for orthofinder's parallel processing"
		echoerr "Example: $(basename $0) ${_arg_menu[0]}"
		exit $EXIT_SUCCESS
	fi

	DATA_DIR=orthofinder-op
	cd $ODIR
	rm -rf $DATA_DIR
	mkdir -p $DATA_DIR
	cp gene/aa/*.faa $DATA_DIR
	orthofinder -f $DATA_DIR -n 1 -op |
		grep "^diamond blastp --ignore-warnings" >run-orthofinder.txt
	cd - >/dev/null

	# echoall "COMMENT: Two approaches: 1. split the file run-orthofinder.txt and execute them in several computers."
	# echoall "Example: split -d -n l/5 run-orthofinder.txt"
	# echoall "COMMENT: Two approaches: 2. use parallel to distribute jobs in run-orthofinder.txt"
	# echoall "Example: parallel ..."
	# echoall "COMMENT: Copy orthofinder data in either approach you use."
	# echoall "COMMENT: scp -qpr orthofinder/ vincent:\$PWD/ &"
	# echoall "COMMENT: scp x?? vincent:\$PWD/"

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Runs the DIAMOND jobs.
# Time: Aves: 3 days 13 hours
#       hcgo:
################################################################################
function _run_ebp_sc-4-1-split-orthofinder-2 {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# Runs the DIAMOND jobs using GNU parallel.
# First, you need to configure remote machines.
# Make the same directory structure in all the remote computers as your local
# computer that you ran the EBP command.
# You should copy all the $ODIR/orthofinder directory.
# Make a nodefile with machine names.
# You should be able to ssh those machines without password.
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-4-1-split-orthofinder-3
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	DATA_DIR=$ODIR/orthofinder-op

	WorkingDirectory="$PWD/$DATA_DIR/OrthoFinder/Results_1/WorkingDirectory"
	DIAMOND="diamond"
	N=$(ls $WorkingDirectory/*.dmnd | wc -l)
	N=$((N - 1))

	parallel \
		--results ${DATA_DIR}-outdir \
		--return $WorkingDirectory/Blast{1}_{2}.txt.gz \
		--sshloginfile $ODIR/nodefile \
		--basefile $WorkingDirectory \
		--cleanup \
		--bar \
		--filter-hosts \
		--sshdelay 0.1 \
		conda activate supercrunch";" \
		$DIAMOND blastp --ignore-warnings \
		-d $WorkingDirectory/diamondDBSpecies{2} \
		-q $WorkingDirectory/Species{1}.fa \
		-o $WorkingDirectory/Blast{1}_{2}.txt \
		--more-sensitive -p 1 --quiet -e 0.001 --compress 1 \
		:::: <(seq 0 "$N") :::: <(seq 0 "$N")

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# OrthoFinder upto inferring orthogroups.
# Outputs:
#   $ODIR/orthofinder-og/OrthoFinder/Results_1/Orthogroups/Orthogroups.tsv
################################################################################
function _run_ebp_sc-4-1-split-orthofinder-3 {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# OrthoFinder upto inferring orthogroups.
# Outputs:
#   $ODIR/orthofinder-og/OrthoFinder/Results_1/Orthogroups/Orthogroups.tsv
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-4-1-split-orthofinder-4
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	cd $ODIR
	OFRESULTS1=OrthoFinder/Results_1
	echoerr "LOG: copying orthofinder-op's WorkingDirectory to orthofinder-og ..."
	cp -pr orthofinder-op/$OFRESULTS1/WorkingDirectory orthofinder-og
	echoerr "LOG: orthofinder -b orthofinder-og -og ..."
	orthofinder -b orthofinder-og -og -n 1
	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

# TODO: filtering CDS OG groups.
# Some OG did not finish its final step.
# I suspect that the sequence length variation might be a problem.

################################################################################
# Considers the length distribution of OG sequences.
################################################################################
function _run_ebp_sc-4-1-split-orthofinder-4 {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# Considers the length distribution of OG sequences.
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-4-3-orthofinder
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	cd $ODIR

	OFRESULTS1=OrthoFinder/Results_1
	DATA_DIR=orthofinder-og/lengths
	path="orthofinder-og/$OFRESULTS1/Orthogroup_Sequences"

	# rm -rf ${DATA_DIR}
	# mkdir -p ${DATA_DIR}
	# echoerr "LOG: counting lengths of orthofinder-og/$OFRESULTS1/Orthogroup_Sequences/OG*.fa ..."
	# ls $path |
	# 	parallel \
	# 		--results ${DATA_DIR}-outdir \
	# 		--bar \
	# 		seqkit fx2tab --length --name --header-line $path/{} \
	# 		">"orthofinder-og/lengths/{/.}.tsv

	echoerr "LOG: filtering sequences by length of orthofinder-og/lengths-filtered ..."
	DATA_DIR=orthofinder-og/lengths-filtered
	rm -rf ${DATA_DIR}
	mkdir -p ${DATA_DIR}
	ls $path |
		parallel \
			--results ${DATA_DIR}-outdir \
			--bar \
			"$WDIR"/filter-outlier-sequences-by-length.R \
			orthofinder-og/lengths/{/.}.tsv \
			orthofinder-og/lengths-filtered/{/.}.tsv

	cat orthofinder-og/lengths-filtered/OG*.tsv >orthofinder/cds2og.txt

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# OrthoFinder from inferring orthogroups to the end.
################################################################################
function _run_ebp_sc-4-1-split-orthofinder-5-optional {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# OrthoFinder from inferring orthogroups to the end.
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-4-2-orthofinder
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	total_memory=$(free -g | awk '/^Mem:/{print $2}')
	T=$((total_memory / 20))

	OFRESULTS1=OrthoFinder/Results_1
	cd $ODIR
	echoerr "LOG: orthofinder -fg orthofinder-og/$OFRESULTS1 -n 2 ..."
	orthofinder -fg orthofinder-og/$OFRESULTS1 -n 2
	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Prepares a mapping of CDS to Orthogroups.
# Inputs:
#   $ODIR/orthofinder-og/OrthoFinder/Results_1/Orthogroups/Orthogroups.tsv
# Outputs:
#   $ODIR/orthofinder/cds2og.txt
################################################################################
function _run_ebp_sc-4-2-orthofinder {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
Prepares a mapping of CDS to Orthogroups.
# Inputs:
#   $ODIR/orthofinder-og/OrthoFinder/Results_1/Orthogroups/Orthogroups.tsv
# Outputs:
#   $ODIR/orthofinder/cds2og.txt
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: -> [$ODIR/orthofinder/cds2og.txt]
NEXT: sc-4-3-orthofinder
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: preparing a mapping of CDS to Ortho Groups..."
	echoall "     -> [$ODIR/orthofinder/cds2og.txt]"

	cd $ODIR
	mkdir orthofinder
	F="orthofinder-og/OrthoFinder/Results_1/Orthogroups/Orthogroups.tsv"
	[ ! -f "$F" ] && {
		echoall "$0 - File $F not found."
		exit 1
	}
	sed 1,1d "$F" >orthofinder/1.tsv
	filename=orthofinder/1.tsv
	total_lines=$(wc -l <"$filename")

	# Initialize the progress
	current_line=0

	while read line; do
		OG=$(echo ${line//,/} | tr -s '[:blank:]' | tr -d $'\r' | awk '{print $1}')
		echo ${line//,/} | tr -s '[:blank:]' | tr -d $'\r' | awk -v og="$OG.fasta" '{for (i=2; i<=NF; i++) print $i, og}'
		current_line=$((current_line + 1))
		show_progress "$current_line" "$total_lines"
	done < <(sed 1,1d "$F") >"orthofinder/cds2og.txt"
	echoall ""
	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Splits CDS sequences to loci or orthogroups.
# Inputs:
#   $ODIR/gene/cds/*.fna -> $ODIR/orthofinder/input/all.fna
# Outputs:
#   $ODIR/orthofinder/output
################################################################################
# Aves: 10 mins.
function _run_ebp_sc-4-3-orthofinder {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# Splits CDS sequences to loci or orthogroups.
# Inputs:
#   $ODIR/gene/cds/*.fna -> $ODIR/orthofinder/input/all.fna
# Outputs:
#   $ODIR/orthofinder/output
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-4-4-orthofinder
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: splitting CDS sequences to loci or ortho groups -> [$ODIR/orthofinder/output]"
	cd $ODIR
	rm -rf orthofinder/output
	mkdir orthofinder/input
	cat gene/cds/*.fna >orthofinder/input/all.fna
	perl "$WDIR"/split-fasta-by-name.pl --fasta orthofinder/input/all.fna --mapping orthofinder/cds2og.txt --outdir orthofinder/output
	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

# TODO: check the distribution of the number of sequences.
################################################################################
# Filters out too-small-number-of-sequences loci
# Inputs:
#   $ODIR/orthofinder/output
# Outputs:
#   $ODIR/orthofinder-filtered/output
################################################################################
function _run_ebp_sc-4-4-orthofinder {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# Filters out too-small-number-of-sequences loci
# Outputs:
#   $ODIR/orthofinder-filtered/output
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: sc-5-similarity-search
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: filtering out too-small-number-of-sequences loci -> [$ODIR/orthofinder-filtered/output]"

	cd $ODIR
	mkdir -p orthofinder-filtered/output
	cp orthofinder/output/*.fasta orthofinder-filtered/output

	# find loci -name *.fasta -not -empty | parallel cp {} cluster-blast/input
	N_SEQ=$(cat genome-assembly.tsv | wc -l)
	P_SEQ="$(config_get min_percent_number_sequences_locus)"
	NP_SEQ=$((N_SEQ * P_SEQ / 100))
	echoall "LOG: minimum number of sequences of loci: $NP_SEQ <- $N_SEQ"
	N1_SEQ=$(ls orthofinder-filtered/output | wc -l)

	seqkit stats -T orthofinder-filtered/output/*.fasta |
		csvtk -t filter -f "num_seqs<=$NP_SEQ" >orthofinder-filtered/filtered.tsv
	cut -f1 orthofinder-filtered/filtered.tsv | csvtk del-header |
		parallel --bar rm {}

	N2_SEQ=$(ls orthofinder-filtered/output | wc -l)
	echoall "LOG: the number of loci changed $N1_SEQ -> $N2_SEQ"

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Performs SuperCRUNCH's Cluster_Blast_Extract
################################################################################
function _run_ebp_sc-5-similarity-search {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# Performs SuperCRUNCH's Cluster_Blast_Extract
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: [$ODIR/orthofinder-filtered/output] -> [$ODIR/cluster-blast/output]
NEXT: sc-6-sequence-selection
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: SuperCRUNCH:5:Similarity Searches and Filtering:Cluster_Blast_Extract.py"

	cd $ODIR

	PREV_DATA_DIR=orthofinder-filtered
	DATA_DIR=cluster-blast

	rm -rf $DATA_DIR
	mkdir -p $DATA_DIR/{inputs,input,outputs,output}
	cp $PREV_DATA_DIR/output/*.fasta $DATA_DIR/input

	# split
	split-input $DATA_DIR

	rm -rf ${DATA_DIR}-outdir
	ls $DATA_DIR/inputs/ |
		parallel \
			--results ${DATA_DIR}-outdir \
			--bar \
			--sshloginfile nodefile \
			--transferfile $PWD/${DATA_DIR}/inputs/{} \
			--return $PWD/${DATA_DIR}/outputs/{} \
			--cleanup \
			--filter-hosts \
			--sshdelay 0.1 \
			conda activate supercrunch";" \
			mkdir -p $PWD/${DATA_DIR}/outputs/{}";" \
			python "$WDIR"/supercrunch-scripts/Cluster_Blast_Extract.py \
			-i $PWD/${DATA_DIR}/inputs/{}/ \
			-o $PWD/${DATA_DIR}/outputs/{}/ \
			-b dc-megablast --threads 4

	# combine
	find $DATA_DIR/outputs/vol*/Filtered-Fasta-Files -name *.fasta | parallel cp {} $DATA_DIR/output/{/}

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
################################################################################
function _run_ebp_sc-6-sequence-selection {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	_run_ebp_sc-6-1-sequence-selection
	_run_ebp_sc-6-2-sequence-removal

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Performs SuperCRUNCH's Filter_Seqs_and_Species
################################################################################
# find cluster-blast-outdir -name stderr -not -empty -ls
function _run_ebp_sc-6-1-sequence-selection {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# Performs SuperCRUNCH's Filter_Seqs_and_Species
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: [$ODIR/cluster-blast/output] -> [$ODIR/filter-seqs/output]
NEXT: sc-7-1
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	MIN_CDS_LENGTH="$(config_get min_cds_length)"
	if [[ "$MIN_CDS_LENGTH" == "__UNDEFINED__" ]]; then
		MIN_CDS_LENGTH=150
	fi

	echoall "LOG: SuperCRUNCH:6:Sequence Selection:Filter_Seqs_and_Species.py"

	cd $ODIR

	PREV_DATA_DIR=cluster-blast
	DATA_DIR=filter-seqs

	rm -rf $DATA_DIR
	mkdir -p $DATA_DIR/{inputs,input,outputs,output}
	cp $PREV_DATA_DIR/output/*_extracted.fasta $DATA_DIR/input

	# split
	split-input $DATA_DIR

	rm -rf ${DATA_DIR}-outdir
	ls $DATA_DIR/inputs/ |
		parallel \
			--results ${DATA_DIR}-outdir \
			--bar \
			--sshloginfile nodefile \
			--transferfile $PWD/${DATA_DIR}/inputs/{} \
			--return $PWD/${DATA_DIR}/outputs/{} \
			--basefile $PWD/fastaset/output/Species_Names.txt \
			--cleanup \
			--filter-hosts \
			--sshdelay 0.1 \
			conda activate supercrunch";" \
			mkdir -p $PWD/${DATA_DIR}/outputs/{}";" \
			python "$WDIR"/supercrunch-scripts/Filter_Seqs_and_Species.py \
			-i $PWD/$DATA_DIR/inputs/{}/ \
			-o $PWD/$DATA_DIR/outputs/{}/ \
			-s allseqs \
			-f length \
			-m $MIN_CDS_LENGTH \
			-t $PWD/fastaset/output/Species_Names.txt --no_subspecies

	# combine
	find $DATA_DIR/outputs/vol*/Results/Filtered-Fasta-Files -name *_allseqs.fasta | parallel cp {} $DATA_DIR/output/{/}

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _run_ebp_sc-6-2-sequence-removal {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# Performs SuperCRUNCH's Filter_Seqs_and_Species
# Deletes OG that take too much time.
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: [$ODIR/filter-seqs/output]
NEXT: sc-7-1
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: SuperCRUNCH:6:Sequence Selection:Filter_Seqs_and_Species.py"

	cd $ODIR

	DATA_DIR=filter-seqs

	cat delete-og-ids.txt |
		parallel \
			rm ${DATA_DIR}/output/{}_extracted_allseqs.fasta

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Checks directions and codons before aligning with MAFFT.
################################################################################
function _run_ebp_sc-7-sequence-alignment {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# Checks directions and codons before aligning with MAFFT.
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: ready to build gene trees ... -> [$ODIR/align/]
NEXT: sc-8-gene-trees
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	_run_ebp_sc-7-1-sequence-alignment
	_run_ebp_sc-7-2-sequence-alignment
	_run_ebp_sc-7-3-sequence-alignment

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# SuperCRUNCH:7:Multiple Sequence Alignment:Adjust_Direction.py"
# Arguments:
#   total number of splits should be greater than total number of cores
#   including remote computers.
# Inputs:
#   $ODIR/filter-seqs/output/
# Outputs:
#   $ODIR/adjust/output/
################################################################################
#
# MAGUS
# PASTA: easier to install using conda than MAGUS
#
# Need to split and combine for a faster processing.
function _run_ebp_sc-7-1-sequence-alignment {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	PREV_DATA_DIR=filter-seqs
	DATA_DIR=adjust

	help_message=$(
		cat <<HEREDOC
# SuperCRUNCH:7:Multiple Sequence Alignment:Adjust_Direction.py"
# Arguments:
#   total number of splits should be greater than total number of cores
#   including remote computers.
Example: $(basename $0) ${_arg_menu[0]} [100]
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: [$ODIR/$PREV_DATA_DIR/output] -> [$ODIR/$DATA_DIR/output]
NEXT: sc-7-2-sequence-alignment
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		PARALLEL_NT="$(config_get parallel_nt)"
		config_check $PARALLEL_NT parallel_nt
	else
		PARALLEL_NT="${_arg_menu[1]}"
	fi
	if [[ $(is_integer "$PARALLEL_NT") == "false" ]]; then
		echoerr "ERROR: $PARALLEL_NT is not a proper number."
		exit $EXIT_ERROR
	fi

	echoall "LOG: your parallel's number of CPUs is [$PARALLEL_NT]."

	echoall "LOG: SuperCRUNCH:7:Multiple Sequence Alignment:Adjust_Direction.py"
	cd $ODIR

	rm -rf $DATA_DIR
	mkdir -p $DATA_DIR/{inputs,input,outputs,output}
	cp $PREV_DATA_DIR/output/*_extracted_*.fasta $DATA_DIR/input

	# split
	split-input $DATA_DIR

	rm -rf ${DATA_DIR}-outdir
	ls $DATA_DIR/inputs/ |
		parallel \
			--results ${DATA_DIR}-outdir \
			--bar \
			--sshloginfile nodefile \
			--transferfile $PWD/${DATA_DIR}/inputs/{} \
			--return $PWD/${DATA_DIR}/outputs/{} \
			--cleanup \
			--filter-hosts \
			--sshdelay 0.5 \
			conda activate supercrunch";" \
			mkdir -p $PWD/${DATA_DIR}/outputs/{}";" \
			python "$WDIR"/supercrunch-scripts/Adjust_Direction.py \
			-i $PWD/${DATA_DIR}/inputs/{}/ \
			-o $PWD/${DATA_DIR}/outputs/{}/ --threads 2

	# combine
	find $DATA_DIR/outputs/vol*/Adjusted-Fasta-Files -name *.fasta | parallel cp {} $DATA_DIR/output/{/}

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# SuperCRUNCH:7:Multiple Sequence Alignment:Coding_Translation_Tests.py"
# Arguments:
#   total number of splits should be greater than total number of cores
#   including remote computers.
# Inputs:
#   $ODIR/adjust/output/
# Outputs:
#   $ODIR/coding/output/
################################################################################
# TODO
# Time: fast - might not need the split and combine
function _run_ebp_sc-7-2-sequence-alignment {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	PREV_DATA_DIR=adjust
	DATA_DIR=coding

	help_message=$(
		cat <<HEREDOC
# SuperCRUNCH:7:Multiple Sequence Alignment:Coding_Translation_Tests.py"
# Arguments:
#   total number of splits should be greater than total number of cores
#   including remote computers.
Example: $(basename $0) ${_arg_menu[0]} [100]
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: [$ODIR/$PREV_DATA_DIR/output] -> [$ODIR/$DATA_DIR/output]
NEXT: sc-7-3-sequence-alignment
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		PARALLEL_NT="$(config_get parallel_nt)"
		config_check $PARALLEL_NT parallel_nt
	else
		PARALLEL_NT="${_arg_menu[1]}"
	fi
	if [[ $(is_integer "$PARALLEL_NT") == "false" ]]; then
		echoerr "ERROR: $PARALLEL_NT is not a proper number."
		exit $EXIT_ERROR
	fi

	echoall "LOG: your parallel's number of CPUs is [$PARALLEL_NT]."

	echoall "LOG: SuperCRUNCH:7:Multiple Sequence Alignment:Coding_Translation_Tests.py"
	cd $ODIR

	rm -rf $DATA_DIR
	mkdir -p $DATA_DIR/{inputs,input,outputs,output}
	cp $PREV_DATA_DIR/output/*.fasta $DATA_DIR/input

	# split
	split-input $DATA_DIR

	rm -rf ${DATA_DIR}-outdir

	ls $DATA_DIR/inputs/ |
		parallel \
			--results ${DATA_DIR}-outdir \
			--bar \
			--sshloginfile nodefile \
			--transferfile $PWD/${DATA_DIR}/inputs/{} \
			--return $PWD/${DATA_DIR}/outputs/{} \
			--cleanup \
			--filter-hosts \
			--sshdelay 0.1 \
			conda activate supercrunch";" \
			mkdir -p $PWD/${DATA_DIR}/outputs/{}";" \
			python "$WDIR"/supercrunch-scripts/Coding_Translation_Tests.py \
			-i $PWD/$DATA_DIR/inputs/{}/ \
			-o $PWD/$DATA_DIR/outputs/{}/ --table standard

	find $DATA_DIR/outputs/vol*/Translation-Passed-Seqs -name *_extracted_allseqs_Adjusted_Passed.fasta | parallel cp {} $DATA_DIR/output/{/}

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# SuperCRUNCH:7:Multiple Sequence Alignment:Align.py"
# Arguments:
#   total number of splits should be greater than total number of cores
#   including remote computers.
################################################################################
function _run_ebp_sc-7-3-sequence-alignment {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	PREV_DATA_DIR=coding
	DATA_DIR=align

	help_message=$(
		cat <<HEREDOC
# SuperCRUNCH:7:Multiple Sequence Alignment:Align.py"
# Arguments:
#   total number of splits should be greater than total number of cores
#   including remote computers.
Example: $(basename $0) ${_arg_menu[0]} [100]
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: [$ODIR/$PREV_DATA_DIR/output] -> [$ODIR/$DATA_DIR/output]
NEXT: sc-8-gene-trees
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	if [[ ${_arg_menu[1]} == "snumber" ]]; then
		PARALLEL_NT="$(config_get parallel_nt)"
		config_check $PARALLEL_NT parallel_nt
	else
		PARALLEL_NT="${_arg_menu[1]}"
	fi
	if [[ $(is_integer "$PARALLEL_NT") == "false" ]]; then
		echoerr "ERROR: $PARALLEL_NT is not a proper number."
		exit $EXIT_ERROR
	fi

	echoall "LOG: your parallel's number of CPUs is [$PARALLEL_NT]."

	echoall "LOG: SuperCRUNCH:7:Multiple Sequence Alignment:Align.py"
	cd $ODIR

	rm -rf $DATA_DIR
	mkdir -p $DATA_DIR/{inputs,input,outputs,output}
	cp $PREV_DATA_DIR/output/*.fasta $DATA_DIR/input

	# split
	split-input $DATA_DIR

	rm -rf ${DATA_DIR}-outdir

	ls $DATA_DIR/inputs/ |
		parallel \
			--results ${DATA_DIR}-outdir \
			--bar \
			--sshloginfile nodefile \
			--transferfile $PWD/${DATA_DIR}/inputs/{} \
			--return $PWD/${DATA_DIR}/outputs/{} \
			--cleanup \
			--filter-hosts \
			--sshdelay 0.1 \
			conda activate supercrunch";" \
			mkdir -p $PWD/${DATA_DIR}/outputs/{}";" \
			python "$WDIR"/supercrunch-scripts/Align.py \
			-i $PWD/${DATA_DIR}/inputs/{}/ \
			-o $PWD/${DATA_DIR}/outputs/{}/ -a mafft

	find $DATA_DIR/outputs/vol*/Alignments-MAFFT -name *.fasta | parallel cp {} $DATA_DIR/output/{/}

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Builds gene trees using IQ-TREE.
################################################################################
# primates: 30 hrs
# Hominidae: 6 hrs
function _run_ebp_sc-8-gene-trees {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	PREV_DATA_DIR=align
	DATA_DIR=iqtree

	help_message=$(
		cat <<HEREDOC
# Builds gene trees using IQ-TREE.
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: [$ODIR/$PREV_DATA_DIR/output] -> [$ODIR/$DATA_DIR]
NEXT: sc-9-species-tree
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: building gene trees ..."
	cd $ODIR

	if [[ ${_arg_menu[1]} == "redo" ]]; then
		echoall "LOG: redo ${_arg_menu[0]}"
		rm -rf $DATA_DIR
	fi

	mkdir -p $DATA_DIR/{inputs,input,outputs,output}

	if [[ ${_arg_menu[1]} == "redo" ]]; then
		cp $PREV_DATA_DIR/output/*.fasta $DATA_DIR/input
	fi

	rm -rf ${DATA_DIR}-outdir

	find $DATA_DIR/input -name *.fasta |
		parallel \
			--jobs 40% \
			--results ${DATA_DIR}-outdir \
			--bar \
			--sshloginfile nodefile \
			--transferfile $PWD/${DATA_DIR}/input/{/} \
			--transferfile $PWD/${DATA_DIR}/input/{/}.treefile \
			--transferfile $PWD/${DATA_DIR}/input/{/}.bionj \
			--transferfile $PWD/${DATA_DIR}/input/{/}.ckp.gz \
			--transferfile $PWD/${DATA_DIR}/input/{/}.log \
			--transferfile $PWD/${DATA_DIR}/input/{/}.mldist \
			--transferfile $PWD/${DATA_DIR}/input/{/}.model.gz \
			--return $PWD/${DATA_DIR}/input/{/}.treefile \
			--return $PWD/${DATA_DIR}/input/{/}.bionj \
			--return $PWD/${DATA_DIR}/input/{/}.ckp.gz \
			--return $PWD/${DATA_DIR}/input/{/}.iqtree \
			--return $PWD/${DATA_DIR}/input/{/}.log \
			--return $PWD/${DATA_DIR}/input/{/}.mldist \
			--return $PWD/${DATA_DIR}/input/{/}.model.gz \
			--cleanup \
			--filter-hosts \
			--sshdelay 0.5 \
			conda activate supercrunch";" \
			iqtree --quiet -T AUTO --threads-max $NT2 -s $PWD/${DATA_DIR}/input/{/}

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Moves finished files to ouput
################################################################################
function _run_ebp_sc-8-gene-trees-1 {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	PREV_DATA_DIR=align
	DATA_DIR=iqtree

	help_message=$(
		cat <<HEREDOC
# Moves finished files to ouput
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: N/A
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: moving gene trees to [$DATA_DIR/outputs] ..."
	cd $ODIR

	cd $DATA_DIR
	for i in $(ls input/*.fasta); do
		if [[ -s $i.iqtree ]]; then
			mv "$i"* outputs/
		fi
	done

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _run_ebp_sc-8-gene-trees-2 {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	PREV_DATA_DIR=align
	DATA_DIR=iqtree

	help_message=$(
		cat <<HEREDOC
# Moves finished files to ouput
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
NEXT: N/A
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: moving gene trees to [$DATA_DIR/outputs] ..."
	cd $ODIR

	cd $DATA_DIR
	for i in $(ls outputs/*.fasta); do
		if [[ ! -s $i.iqtree ]]; then
			echoerr No file: $i.iqtree
		fi
		[ -s $i.bionj ] || echoerr "No File: $i.bionj"
		[ -s $i.ckp.gz ] || echoerr "No File: $i.ckp.gz"
		[ -s $i.log ] || echoerr "No File: $i.log"
		[ -s $i.mldist ] || echoerr "No File: $i.mldist"
		[ -s $i.model.gz ] || echoerr "No File: $i.model.gz"
		[ -s $i.treefile ] || echoerr "No File: $i.treefile"
		[ -s $i.uniqueseq.phy ] || echoerr "No File: $i.uniqueseq.phy"
	done

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Builds a species tree using the ASTRAL family.
################################################################################
function _run_ebp_sc-9-species-tree {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# Builds a species tree using the ASTRAL family.
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	_run_ebp_sc-9-1-species-tree-astralpro-1
	_run_ebp_sc-9-2-species-tree-astralpro-2
	_run_ebp_sc-9-3-species-tree-disco-1
	_run_ebp_sc-9-4-species-tree-disco-2
	_run_ebp_sc-9-5-species-tree-disco-3
	_run_ebp_sc-9-6-species-tree-disco-4

	end_message=$(
		cat <<HEREDOC
LOG: [$ODIR/$PREV_DATA_DIR/output] -> [$ODIR/$DATA_DIR]
NEXT: sc-7-3
HEREDOC
	)

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

################################################################################
# Prepares gene trees and mapping files for ASTRAL-Pro3.
################################################################################
function _run_ebp_sc-9-1-species-tree-astralpro-1 {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	help_message=$(
		cat <<HEREDOC
# Prepares gene trees and mapping files for ASTRAL-Pro3.
Example: $(basename $0) ${_arg_menu[0]}
HEREDOC
	)

	end_message=$(
		cat <<HEREDOC
LOG: [$ODIR/$PREV_DATA_DIR/output] -> [$ODIR/$DATA_DIR]
NEXT: sc-7-3
HEREDOC
	)

	if [[ ${_arg_menu[1]} == "help" ]]; then
		echoerr "${help_message}"
		exit $EXIT_SUCCESS
	fi

	echoall "LOG: preparing gene trees and mapping for ASTRAL-Pro3"
	cd $ODIR

	PREV_DATA_DIR=iqtree
	DATA_DIR=astral
	rm -rf $DATA_DIR
	mkdir -p $DATA_DIR/{inputs,input,outputs,output}
	cat $PREV_DATA_DIR/*.treefile >$DATA_DIR/genetrees.nwk
	echoall "LOG: -> [$ODIR/$DATA_DIR/genetrees.nwk]"
	cat $PREV_DATA_DIR/*.fasta | seqkit seq -n | process_input2 >$DATA_DIR/mapping.txt
	echoall "LOG: -> [$ODIR/$DATA_DIR/mapping.txt]"

	cd - >/dev/null

	echoerr "${end_message}"

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _run_ebp_sc-9-2-species-tree-astralpro-2 {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	echoall "LOG: building a species tree using ASTRAL-Pro3 -> [$ODIR/astral/species-astralpro3.nwk]"
	cd $ODIR
	"$WDIR"/../tools/ASTER-Linux/bin/astral-pro3 -t $NT -a astral/mapping.txt -o astral/species-astralpro3.nwk astral/genetrees.nwk 2>astral/log-astralpro3.txt
	cd - >/dev/null

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _run_ebp_sc-9-3-species-tree-disco-1 {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	echoall "LOG: preparing mapping for DISCO -> [$ODIR/astral/mapping-disco.txt]"
	cd $ODIR
	input_file=astral/mapping.txt

	# Check if the input file exists
	if [ ! -f "$input_file" ]; then
		echo "File not found!"
		exit 1
	fi

	# Process the file line by line
	while IFS=' ' read -r col1 col2; do
		new_col2="${col2}-${col1}"
		echo "$col1 $new_col2"
	done <"$input_file" >astral/mapping-disco.txt

	cd - >/dev/null

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _run_ebp_sc-9-4-species-tree-disco-2 {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	echoall "LOG: preparing gene tree labels for DISCO using newick_utils -> [$ODIR/iqtree/*.disco.nwk]"
	cd $ODIR
	ls iqtree/*.treefile | parallel $HOME/all/ebp/tools/newick_utils/src/nw_rename {} astral/mapping-disco.txt ">"{.}.disco.nwk
	cd - >/dev/null

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _run_ebp_sc-9-5-species-tree-disco-3 {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	echoall "LOG: DISCO family trees to single-copy gene trees"
	cd $ODIR
	cat iqtree/*.disco.nwk >astral/disco-input.nwk
	python "$WDIR"/disco-20240708/disco.py -i astral/disco-input.nwk -o astral/disco-output.nwk -d '-'
	python "$WDIR"/disco-20240708/disco.py --keep-labels -i astral/disco-input.nwk -o astral/disco-output-keep-labels.nwk -d '-'
	echoall "LOG: -> [$ODIR/astral/disco-output.nwk]"
	echoall "LOG: -> [$ODIR/astral/disco-output-keep-labels.nwk]"
	cd - >/dev/null

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _run_ebp_sc-9-6-species-tree-disco-4 {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	echoall "LOG: building a species tree using ASTRAL4 -> [$ODIR/astral/species-astral4.nwk]"
	cd $ODIR
	"$WDIR"/../tools/ASTER-Linux/bin/astral4 -t $NT2 -o astral/species-astral4.nwk astral/disco-output.nwk 2>astral/log-astral4.txt
	cd - >/dev/null

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _run_ebp_test {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	echo -e ">seq1 abc-123\nACGT-ACGT" |
		seqkit replace -s -p "\-" -r 'N' >&2

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _run_ebp_template {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	echoall $0
	echoall $FUNCNAME
	echoall $1
	echoall $2
	echoall ${_arg_menu[0]}
	echoall ${_arg_menu[1]}
	echoall ${_arg_menu[2]}
	echoall ${_arg_menu[3]}

	echoall "$(config_get myvar)"              # will be found in user-cfg
	printf -- "%s\n" "$(config_get myvar)" >&2 # safer way of echoing!
	myvar="$(config_get myvar)"                # how to just read a value without echoing
	echoall "$(config_get othervar)"           # will fall back to defaults
	echoall "$(config_get bleh)"               # "__UNDEFINED__" since it isn't set anywhere

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

function _run_ebp_help() {
	if [ "$DEBUG" -eq 1 ]; then set -x; fi

	print_help >&2

	if [ "$DEBUG" -eq 1 ]; then set +x; fi
}

# for the magic logit function
function logit() {
	while read; do
		# echo "$(date) $REPLY" >> ${LOG_FILE}
		# -1 means "current time"
		# printf "[%(%Y-%m-%d %T)T] %s\n" -1 "$REPLY" >> ${LOG_FILE}
		printf "[%s] %s\n" "$(date +"%Y-%m-%d %T")" "$REPLY" >>${LOG_FILE}
	done
}

function echoerr() { echo "$@" 1>&2; }

function echoall() {
	echo "$@" 1>&2
	echo "$@"
}

function yell() { echoall "$@"; }

function die {
	yell "$@"
	exit $EXIT_FAIL
}

function try() { "$@" || die "cannot $*"; }

################################################################################
# MAIN
################################################################################

################################################################################
# All of the variables at our disposal
#

# include and execute other BASH and R scripts
WDIR="$(dirname "$0")"
WDIR="${BASH_SOURCE%/*}"
if [[ ! -d "$WDIR" ]]; then
	WDIR="$PWD"
fi
WDIR=$script_dir

CONFIG="$PWD"/config.ebp
if [ ${_arg_menu[0]} != "sc-workflow-hominidae" ] &&
	[ ${_arg_menu[0]} != "init" ] &&
	[ ${_arg_menu[0]} != "subcommand" ]; then
	if [ ! -f "$CONFIG" ]; then
		echoerr "ERROR: no such config file: [$CONFIG]"
		echoerr "SUGGESTION: create a config file."
		echoerr "Example: init Aves"
		echoerr "Example: init"
		exit $EXIT_ERROR
	fi
fi

# variables for output
ODIR=$_arg_outdir
if [ "$_arg_outdir_set" != "true" ]; then
	OUT="$(config_get out)"
	if [ "$OUT" = "__UNDEFINED__" ]; then
		ODIR="o"
	else
		ODIR="$OUT"
	fi
fi

# tuning variables for optimal performance
# NT=$(cat /proc/cpuinfo | grep -c processor)
NT=$_arg_threads
NT2=$(($NT / 2))
if test -z "$DEBUG"; then
	DEBUG=0
fi
PARALLEL_NT=$NT

if [ $# -eq 0 ]; then
	print_help
	exit $EXIT_SUCCESS
fi

################################################################
# LOG
#
# all message to a log file
# https://stackoverflow.com/questions/49851882/how-to-log-echo-statement-with-timestamp-in-shell-script
LOG_FILE="./ebp.log"
exec 3>&1 1>> >(logit)
# exec 3>&1 1>> >(logit) 2>&1

CMD="$(basename $0) $*"
echo "CMD: $CMD"

################################################################
# Variables
_ebp_default

################################################################################
# Constants
EXIT_SUCCESS=0
EXIT_FAIL=1
EXIT_ERROR=2
RETURN_SUCCESS=0
RETURN_FAIL=1

SECONDS=0

# subcommand function call
if declare -f "_run_ebp_${_arg_menu[0]}" >/dev/null 2>&1; then
	# invoke that function, passing arguments through
	if [ ${_arg_menu[0]} != "subcommand" ]; then
		_run_ebp_"$@" # same as "$1" "$2" "$3" ... for full argument list
	else
		_run_ebp_subcommand
	fi
else
	echoerr "Menu: init"
	echoerr "      reset"
	echoerr "      clean"
	echoerr "      make-commands"
	echoerr "ERROR: no such menu of $1"
	echoerr "SUGGESTION: use make-commands to create menus as files"
fi

ELAPSED="Time: $((SECONDS / 3600))hrs $(((SECONDS / 60) % 60))min $((SECONDS % 60))sec - $CMD"
echo "$ELAPSED"

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
