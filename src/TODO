# TODO

See the files to improve the code later if necessary.

- [ ] collect data for PacBio for plant organelle assembly 
- [ ] analysis of animal mitochondrion assembly using cflye
- [ ] polaplib/polap-cmd-bioproject.sh
- [ ] polaplib/polap-build.sh
- [ ] polaplib/run-polap-function-annotate.sh, polaplib/polap-lib-annotate.sh
- [ ] polaplib/run-polap-function-assemble.sh
- [x] polaplib/polap-cmd-install.sh
- [ ] subcommand subtract -l l.fq -p polished-4-ptdna-sequences.fa -> new l.fq without ptdna reads
- [ ] debug dflye
- [ ] plant mtDNA version of cflye

# 2025-03-28

run-polap-py-find-plastid-gfa2fasta.py and its relatives -filtering-edges.py
It uses too much memory for finding too many circular paths: about 20 GB.
I wonder if this could be the 20 GB memory for our procedure.
I added hard-code like this in python and bash as well to avoid too much memory.
_fixed_upper_bound_number_segments = 30

# 2025-03-15

put most of scripts to lib folder.
use polaplib

# 2025-03-14

# qt5
https://github.com/NVlabs/instant-ngp/discussions/300
sudo apt-get install qt5-default
sudo apt-get install qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools
sudo apt install libxcb-cursor0
export QT_QPA_PLATFORM=offscreen


# 2024-11-22

- create test datasets
- devise more seed selection criteria
- select mtDNA from the graph
- custom flye for polap
- custom flye with faster whole-genome assembly
- error handling
- geseq annotation and automatic NCBI submission

why geseq annotation?

# 2024-10-31

variable change
CONTIG_LENGTH -> _CONTIG_LENGTH

Example: test
Example: Anthoceros angustus

Salix_dunni: single contig case -> no combined data
1. cut half and use two contigs
2. use the single contigs

connect two contigs that are far apart
-> lupulina cpDNA case

# 2024-10-30

install: 

spliting input lk.fq.gz
rw options

asm-coverage = 0.6 x coverage? 
asm-coverage : unknown 30x 50x 70x 90x
subsampling might be a good approach

test reduce-data - nk.fq.gz created without using n.fq
annotation table column names - proper names

## done
return 0 at the end of function to use: tset -e option

# 2024-10-23
# test
-u option

# prev

bioprojects.log.passed

bioproject ID

taxonomy order family species mtDNA accession long SRA short SRA  assembled length  length coverage   Type

# select contig

main 1
select contig - 2 - using all mt contig group
mt & pt
depth cut 5 steps

esearch -db taxonomy -query "taxon_name" | efetch -format docsum | xtract -pattern DocumentSummary -element TaxId

