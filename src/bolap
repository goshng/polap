#!/usr/bin/env bash
################################################################################
# This file is part of polap.
#
# polap is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# polap is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# polap. If not, see <https://www.gnu.org/licenses/>.
################################################################################

# Created by argbash-init v2.10.0
# DEFINE_SCRIPT_DIR([])
# INCLUDE_PARSING_CODE([polap-parsing.sh])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
	echo "[ERROR] This script must be executed, not sourced: use 'bash $BASH_SOURCE'" >&2
	return 1 2>/dev/null || exit 1
fi

: "${_POLAP_DEBUG:=0}"
export _POLAP_DEBUG
: "${_POLAP_RELEASE:=1}"
export _POLAP_RELEASE

_local_host="thorne"
_media_dir="/media/h2/sra"
_media1_dir="/media/h1/sra"
_media2_dir="/media/h2/sra"

if [[ "${_POLAP_RELEASE}" == "0" ]]; then
	if [[ "${_local_host}" != $(hostname) ]]; then
		cd .. && rsync -aq ${_local_host}:$PWD/github/ github/ && cd -
	fi
fi

# OTHER STUFF GENERATED BY Argbash
_polap_script_bin_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" || {
	echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2
	exit 2
}
_POLAPLIB_DIR="${_polap_script_bin_dir}/polaplib"
source "${_POLAPLIB_DIR}/polap-lib-version.sh"

_polap_data_version="${_polap_version}"
if [[ -d "man" ]]; then
	_brg_default_target_dir="man/v${_polap_data_version}/figures"
else
	_brg_default_target_dir="$HOME/all/manuscript/polap-v${_polap_data_version}/figures"
fi

. "${_POLAPLIB_DIR}/bolap-parsing.sh" # '.' means 'source'
_polap_output_dest="/dev/null"

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# vvv  PLACE YOUR CODE HERE  vvv

################################################################################
# include bash shell files
################################################################################

# for var in $(compgen -v _arg_); do
# 	echo "$var=${!var}"
# done

# include bash libraries
source "${_POLAPLIB_DIR}/polap-lib-version.sh"
source "${_POLAPLIB_DIR}/polap-lib-conda.sh"
source "${_POLAPLIB_DIR}/polap-lib-tools.sh"
source "${_POLAPLIB_DIR}/polap-lib-timing.sh"
source "${_POLAPLIB_DIR}/polap-lib-unit.sh"
source "${_POLAPLIB_DIR}/polap-lib-array.sh"
source "${_POLAPLIB_DIR}/polap-lib-number.sh"
source "${_POLAPLIB_DIR}/polap-lib-data.sh"
source "${_POLAPLIB_DIR}/polap-lib-file.sh"
source "${_POLAPLIB_DIR}/polap-lib-process.sh"
source "${_POLAPLIB_DIR}/polap-lib-extract.sh"
source "${_POLAPLIB_DIR}/polap-lib-csv.sh"
source "${_POLAPLIB_DIR}/polap-lib-man.sh"
source <(echo 'export PATH="$PWD/bin:$PATH"')
source <(echo 'export QT_QPA_PLATFORM=minimal')

source "${_POLAPLIB_DIR}/bolap-cmd-template.sh"
source "${_POLAPLIB_DIR}/bolap-cmd-install.sh"

source "${_POLAPLIB_DIR}/polap-lib-data.sh"

# if [[ -s "${HOME}/.bolaprc" ]]; then
# 	item=$(<"${HOME}/.bolaprc")
# 	if [[ -z "${item}" ]]; then
# 		item="read"
# 	fi
# else
# 	item="read"
# 	echo "${item}" >"${HOME}/.bolaprc"
# fi
source "${_POLAPLIB_DIR}/polap-data-${_bolap_type}.sh"

# ADD A NEW SUBCOMMAND SOURCE HERE.

################################################################################
# All of the variables at our disposal
################################################################################

################################################################
# MAIN
#
if [ $# -eq 0 ]; then
	print_help
	exit
fi

# Call a subcommand function
if declare -f "_run_bolap_${_brg_menu[0]}" >/dev/null 2>&1; then
	_run_bolap_${_brg_menu[0]}
fi

# ^^^  TERMINATE YOUR CODE BEFORE THE BOTTOM ARGBASH MARKER  ^^^

# ] <-- needed because of Argbash
